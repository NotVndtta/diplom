<%= content_for :title, "Статистика #{@user.name}" %>

<div class="max-w-7xl mx-auto py-8 px-4">
  <h1 class="text-3xl font-bold mb-8 text-center">Статистика пользователя <%= @user.name %></h1>

  <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
    <!-- Статистика задач -->
    <div class="bg-white rounded-2xl shadow-lg p-6 h-[400px]">
      <h2 class="text-xl font-semibold mb-4">Статус агроопераций</h2>
      <div class="h-[300px]">
        <canvas id="jobStatusChart" class="w-full h-full"></canvas>
      </div>
    </div>

    <!-- Распределение оценок -->
    <div class="bg-white rounded-2xl shadow-lg p-6 h-[400px]">
      <h2 class="text-xl font-semibold mb-4">Рейтинг работника</h2>
      <div class="h-[300px]">
        <canvas id="ratingsChart" class="w-full h-full"></canvas>
      </div>
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
let jobStatusChart = null;
let ratingsChart = null;

function initializeCharts() {
  // Уничтожаем существующие графики, если они есть
  if (jobStatusChart) jobStatusChart.destroy();
  if (ratingsChart) ratingsChart.destroy();

  // Получаем данные с сервера
  fetch(`/profiles/<%= @user.id %>/stats.json`)
    .then(response => response.json())
    .then(data => {
      console.log('Received data:', data);

      // Данные для графика статуса задач
      const jobStatusData = {
        labels: ['В процессе', 'Завершены', 'Запланированы'],
        datasets: [{
          data: [
            data.job_cards.in_progress,
            data.job_cards.completed,
            data.job_cards.pending
          ],
          backgroundColor: ['#facc15', '#84cc16', '#3b82f6']
        }]
      };

      // Данные для графика рейтингов
      const ratingsData = {
        labels: ['1', '2', '3', '4', '5'],
        datasets: [{
          label: 'Количество оценок',
          data: [
            data.ratings['1'] || 0,
            data.ratings['2'] || 0,
            data.ratings['3'] || 0,
            data.ratings['4'] || 0,
            data.ratings['5'] || 0
          ],
          backgroundColor: '#84cc16'
        }]
      };

      // Создаем графики
      try {
        jobStatusChart = new Chart(
          document.getElementById('jobStatusChart'),
          {
            type: 'doughnut',
            data: jobStatusData,
            options: {
              responsive: true,
              maintainAspectRatio: false,
              plugins: {
                legend: {
                  position: 'bottom',
                  labels: { font: { size: 14 } }
                }
              }
            }
          }
        );

        ratingsChart = new Chart(
          document.getElementById('ratingsChart'),
          {
            type: 'bar',
            data: ratingsData,
            options: {
              responsive: true,
              maintainAspectRatio: false,
              plugins: {
                legend: {
                  position: 'bottom',
                  labels: { font: { size: 14 } }
                }
              }
            }
          }
        );

        console.log('Charts created successfully');
      } catch (error) {
        console.error('Error creating charts:', error);
      }
    })
    .catch(error => {
      console.error('Error fetching data:', error);
    });
}

// Инициализируем графики при первой загрузке страницы
document.addEventListener('DOMContentLoaded', initializeCharts);

// Инициализируем графики при навигации через Turbo
document.addEventListener('turbo:load', initializeCharts);
</script>
