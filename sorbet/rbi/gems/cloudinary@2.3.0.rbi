# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `cloudinary` gem.
# Please instead update this file by running `bin/tapioca gem cloudinary`.


class ActionController::Base < ::ActionController::Metal
  include ::ActionDispatch::Routing::PolymorphicRoutes
  include ::ActionController::Head
  include ::AbstractController::Caching::ConfigMethods
  include ::ActionController::BasicImplicitRender
  include ::Cloudinary::CloudinaryController
  include ::Devise::Controllers::SignInOut
  include ::Devise::Controllers::StoreLocation
  extend ::AbstractController::Helpers::Resolution
end

# source://cloudinary//lib/cloudinary/helper.rb#362
module ActionView::Helpers::AssetUrlHelper
  # source://actionview/8.0.2/lib/action_view/helpers/asset_url_helper.rb#187
  def asset_path(source, options = T.unsafe(nil)); end

  # source://actionview/8.0.2/lib/action_view/helpers/asset_url_helper.rb#231
  def asset_url(source, options = T.unsafe(nil)); end

  # source://actionview/8.0.2/lib/action_view/helpers/asset_url_helper.rb#430
  def audio_path(source, options = T.unsafe(nil)); end

  # source://actionview/8.0.2/lib/action_view/helpers/asset_url_helper.rb#442
  def audio_url(source, options = T.unsafe(nil)); end

  # source://actionview/8.0.2/lib/action_view/helpers/asset_url_helper.rb#243
  def compute_asset_extname(source, options = T.unsafe(nil)); end

  # source://actionview/8.0.2/lib/action_view/helpers/asset_url_helper.rb#277
  def compute_asset_host(source = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://actionview/8.0.2/lib/action_view/helpers/asset_url_helper.rb#266
  def compute_asset_path(source, options = T.unsafe(nil)); end

  # source://actionview/8.0.2/lib/action_view/helpers/asset_url_helper.rb#455
  def font_path(source, options = T.unsafe(nil)); end

  # source://actionview/8.0.2/lib/action_view/helpers/asset_url_helper.rb#467
  def font_url(source, options = T.unsafe(nil)); end

  # source://actionview/8.0.2/lib/action_view/helpers/asset_url_helper.rb#378
  def image_path(source, options = T.unsafe(nil)); end

  # source://actionview/8.0.2/lib/action_view/helpers/asset_url_helper.rb#390
  def image_url(source, options = T.unsafe(nil)); end

  # source://actionview/8.0.2/lib/action_view/helpers/asset_url_helper.rb#321
  def javascript_path(source, options = T.unsafe(nil)); end

  # source://actionview/8.0.2/lib/action_view/helpers/asset_url_helper.rb#333
  def javascript_url(source, options = T.unsafe(nil)); end

  # source://actionview/8.0.2/lib/action_view/helpers/asset_url_helper.rb#187
  def original_path_to_asset(source, options = T.unsafe(nil)); end

  # source://cloudinary//lib/cloudinary/helper.rb#365
  def path_to_asset(source, options = T.unsafe(nil)); end

  # source://actionview/8.0.2/lib/action_view/helpers/asset_url_helper.rb#430
  def path_to_audio(source, options = T.unsafe(nil)); end

  # source://actionview/8.0.2/lib/action_view/helpers/asset_url_helper.rb#455
  def path_to_font(source, options = T.unsafe(nil)); end

  # source://actionview/8.0.2/lib/action_view/helpers/asset_url_helper.rb#378
  def path_to_image(source, options = T.unsafe(nil)); end

  # source://actionview/8.0.2/lib/action_view/helpers/asset_url_helper.rb#321
  def path_to_javascript(source, options = T.unsafe(nil)); end

  # source://actionview/8.0.2/lib/action_view/helpers/asset_url_helper.rb#348
  def path_to_stylesheet(source, options = T.unsafe(nil)); end

  # source://actionview/8.0.2/lib/action_view/helpers/asset_url_helper.rb#404
  def path_to_video(source, options = T.unsafe(nil)); end

  # source://actionview/8.0.2/lib/action_view/helpers/asset_url_helper.rb#266
  def public_compute_asset_path(source, options = T.unsafe(nil)); end

  # source://actionview/8.0.2/lib/action_view/helpers/asset_url_helper.rb#348
  def stylesheet_path(source, options = T.unsafe(nil)); end

  # source://actionview/8.0.2/lib/action_view/helpers/asset_url_helper.rb#360
  def stylesheet_url(source, options = T.unsafe(nil)); end

  # source://actionview/8.0.2/lib/action_view/helpers/asset_url_helper.rb#231
  def url_to_asset(source, options = T.unsafe(nil)); end

  # source://actionview/8.0.2/lib/action_view/helpers/asset_url_helper.rb#442
  def url_to_audio(source, options = T.unsafe(nil)); end

  # source://actionview/8.0.2/lib/action_view/helpers/asset_url_helper.rb#467
  def url_to_font(source, options = T.unsafe(nil)); end

  # source://actionview/8.0.2/lib/action_view/helpers/asset_url_helper.rb#390
  def url_to_image(source, options = T.unsafe(nil)); end

  # source://actionview/8.0.2/lib/action_view/helpers/asset_url_helper.rb#333
  def url_to_javascript(source, options = T.unsafe(nil)); end

  # source://actionview/8.0.2/lib/action_view/helpers/asset_url_helper.rb#360
  def url_to_stylesheet(source, options = T.unsafe(nil)); end

  # source://actionview/8.0.2/lib/action_view/helpers/asset_url_helper.rb#416
  def url_to_video(source, options = T.unsafe(nil)); end

  # source://actionview/8.0.2/lib/action_view/helpers/asset_url_helper.rb#404
  def video_path(source, options = T.unsafe(nil)); end

  # source://actionview/8.0.2/lib/action_view/helpers/asset_url_helper.rb#416
  def video_url(source, options = T.unsafe(nil)); end
end

# source://cloudinary//lib/cloudinary/version.rb#2
module Cloudinary
  class << self
    # source://cloudinary//lib/cloudinary.rb#45
    def USER_AGENT; end

    # Cloudinary account config
    #
    # @param new_config [Hash] If +new_config+ is passed, Account Config will be updated with it
    # @return [OpenStruct]
    # @yieldparam Account [OpenStruct] config can be updated in the block
    #
    # source://cloudinary//lib/cloudinary.rb#82
    def account_config(new_config = T.unsafe(nil)); end

    # source://cloudinary//lib/cloudinary.rb#99
    def app_root; end

    # Cloudinary config
    #
    # @param new_config [Hash] If +new_config+ is passed, Config will be updated with it
    # @return [OpenStruct]
    # @yieldparam Config [OpenStruct] can be updated in the block
    #
    # source://cloudinary//lib/cloudinary.rb#67
    def config(new_config = T.unsafe(nil)); end

    # source://cloudinary//lib/cloudinary.rb#116
    def config_dir; end

    # source://cloudinary//lib/cloudinary.rb#110
    def config_env; end

    # source://cloudinary//lib/cloudinary.rb#95
    def config_from_account_url(url); end

    # source://cloudinary//lib/cloudinary.rb#91
    def config_from_url(url); end

    # source://cloudinary//lib/cloudinary.rb#121
    def set_config(new_config); end

    # source://cloudinary//lib/cloudinary.rb#41
    def user_platform; end

    # Add platform information to the USER_AGENT header
    # This is intended for platform information and not individual applications!
    #
    # source://cloudinary//lib/cloudinary.rb#37
    def user_platform=(value); end

    private

    # Import settings from yaml file
    #
    # @return [OpenStruct]
    #
    # source://cloudinary//lib/cloudinary.rb#142
    def import_settings_from_file; end

    # Builds config from yaml file, extends it with specific module and loads configuration from environment variable
    #
    # @param config_module [Module] Config is extended with this module after being built
    # @return [OpenStruct]
    #
    # source://cloudinary//lib/cloudinary.rb#130
    def make_new_config(config_module); end
  end
end

# source://cloudinary//lib/cloudinary/account_api.rb#1
class Cloudinary::AccountApi
  extend ::Cloudinary::BaseApi

  class << self
    # Lists access keys.
    #
    # @param sub_account_id [String] The ID of the sub-account.
    # @param options [Object] Additional options.
    #
    # source://cloudinary//lib/cloudinary/account_api.rb#229
    def access_keys(sub_account_id, options = T.unsafe(nil)); end

    # Adds a user to a group with the specified ID.
    #
    # @param group_id [String] The ID of the user group.
    # @param user_id [String] The ID of the user.
    # @param options [Object] additional options
    #
    # source://cloudinary//lib/cloudinary/account_api.rb#186
    def add_user_to_group(group_id, user_id, options = T.unsafe(nil)); end

    # Creates a new sub-account. Any users that have access to all sub-accounts will also automatically have access to the
    # new sub-account.
    #
    # @param name [String] The display name as shown in the management console
    # @param cloud_name [String] A case-insensitive cloud name comprised of alphanumeric and underscore characters.
    #   Generates an error if the specified cloud name is not unique across all Cloudinary accounts.
    #   Note: Once created, the name can only be changed for accounts with fewer than 1000 assets.
    # @param custom_attributes [Object] Any custom attributes you want to associate with the sub-account
    # @param enabled [Boolean] Whether to create the account as enabled (default is enabled)
    # @param base_account [String] ID of sub-account from which to copy settings
    # @param options [Object] additional options
    #
    # source://cloudinary//lib/cloudinary/account_api.rb#14
    def create_sub_account(name, cloud_name = T.unsafe(nil), custom_attributes = T.unsafe(nil), enabled = T.unsafe(nil), base_account = T.unsafe(nil), options = T.unsafe(nil)); end

    # Creates a new user in the account.
    #
    # @param name [String] The name of the user.
    # @param email [String] A unique email address, which serves as the login name and notification address.
    # @param role [String] The role to assign. Possible values: master_admin, admin, billing, technical_admin, reports,
    #   media_library_admin, media_library_user
    # @param sub_account_ids [Array<String>] The list of sub-account IDs that this user can access.
    #   Note: This parameter is ignored if the role is specified as master_admin.
    # @param options [Object] additional options
    #
    # source://cloudinary//lib/cloudinary/account_api.rb#85
    def create_user(name, email, role, sub_account_ids = T.unsafe(nil), options = T.unsafe(nil)); end

    # Creates a new user group.
    #
    # @param name [String] The name for the user group.
    # @param options [Object] additional options
    #
    # source://cloudinary//lib/cloudinary/account_api.rb#162
    def create_user_group(name, options = T.unsafe(nil)); end

    # Deletes access key.
    #
    # @param sub_account_id [String] The ID of the sub-account.
    # @param api_key [String, nil] The API key.
    # @param name [String, nil] The display name as shown in the management console.
    # @param options [Object] Additional options.
    #
    # source://cloudinary//lib/cloudinary/account_api.rb#269
    def delete_access_key(sub_account_id, api_key = T.unsafe(nil), name = T.unsafe(nil), options = T.unsafe(nil)); end

    # Deletes the specified sub-account. Supported only for accounts with fewer than 1000 assets.
    #
    # @param sub_account_id [String] The ID of the sub-account.
    # @param options [Object] additional options
    #
    # source://cloudinary//lib/cloudinary/account_api.rb#73
    def delete_sub_account(sub_account_id, options = T.unsafe(nil)); end

    # Deletes an existing user.
    #
    # @param user_id [String] The ID of the user to delete.
    # @param options [Object] additional options
    #
    # source://cloudinary//lib/cloudinary/account_api.rb#99
    def delete_user(user_id, options = T.unsafe(nil)); end

    # Deletes the user group with the specified ID.
    #
    # @param group_id [String] The ID of the user group to delete.
    # @param options [Object] additional options
    #
    # source://cloudinary//lib/cloudinary/account_api.rb#201
    def delete_user_group(group_id, options = T.unsafe(nil)); end

    # Generates access key.
    #
    # @param sub_account_id [String] The ID of the sub-account.
    # @param name [String] The display name as shown in the management console.
    # @param enabled [Boolean] Whether to create the access key as enabled (default is enabled).
    # @param options [Object] Additional options.
    #
    # source://cloudinary//lib/cloudinary/account_api.rb#240
    def generate_access_key(sub_account_id, name = T.unsafe(nil), enabled = T.unsafe(nil), options = T.unsafe(nil)); end

    # Removes a user from a group with the specified ID.
    #
    # @param group_id [String] The ID of the user group.
    # @param user_id [String] The ID of the user.
    # @param options [Object] additional options
    #
    # source://cloudinary//lib/cloudinary/account_api.rb#194
    def remove_user_from_group(group_id, user_id, options = T.unsafe(nil)); end

    # Retrieves the details of the specified sub-account.
    #
    # @param sub_account_id [String] The ID of the sub-account.
    # @param options [Object] additional options
    #
    # source://cloudinary//lib/cloudinary/account_api.rb#66
    def sub_account(sub_account_id, options = T.unsafe(nil)); end

    # Lists sub-accounts.
    #
    # @param enabled [Boolean] Whether to only return enabled sub-accounts (true) or disabled accounts (false).
    #   Default: all accounts are returned (both enabled and disabled).
    # @param ids [Array<String>] A list of up to 100 sub-account IDs. When provided, other parameters are ignored.
    # @param prefix [String] Returns accounts where the name begins with the specified case-insensitive string.
    # @param options [Object] additional options
    #
    # source://cloudinary//lib/cloudinary/account_api.rb#53
    def sub_accounts(enabled = T.unsafe(nil), ids = T.unsafe(nil), prefix = T.unsafe(nil), options = T.unsafe(nil)); end

    # Updates access key.
    #
    # @param sub_account_id [String] The ID of the sub-account.
    # @param api_key [String] The API key.
    # @param name [String] The display name as shown in the management console.
    # @param enabled [Boolean] Enable or disable the access key.
    # @param options [Object] Additional options.
    #
    # source://cloudinary//lib/cloudinary/account_api.rb#255
    def update_access_key(sub_account_id, api_key, name = T.unsafe(nil), enabled = T.unsafe(nil), options = T.unsafe(nil)); end

    # Updates the specified details of the sub-account.
    #
    # @param sub_account_id [String] The ID of the sub-account.
    # @param name [String] The display name as shown in the management console
    # @param cloud_name [String] A case-insensitive cloud name comprised of alphanumeric and underscore characters.
    #   Generates an error if the specified cloud name is not unique across all Cloudinary accounts.
    #   Note: Once created, the name can only be changed for accounts with fewer than 1000 assets.
    # @param custom_attributes [Object] Any custom attributes you want to associate with the sub-account, as a map/hash
    #   of key/value pairs.
    # @param enabled [Boolean] Whether the sub-account is enabled.
    # @param options [Object] additional options
    #
    # source://cloudinary//lib/cloudinary/account_api.rb#36
    def update_sub_account(sub_account_id, name = T.unsafe(nil), cloud_name = T.unsafe(nil), custom_attributes = T.unsafe(nil), enabled = T.unsafe(nil), options = T.unsafe(nil)); end

    # Updates the details of the specified user.
    #
    # @param user_id [String] The ID of the user to update.
    # @param name [String] The name of the user.
    # @param email [String] A unique email address, which serves as the login name and notification address.
    # @param role [String] The role to assign. Possible values: master_admin, admin, billing, technical_admin, reports,
    #   media_library_admin, media_library_user
    # @param sub_account_ids [Array<String>] The list of sub-account IDs that this user can access.
    #   Note: This parameter is ignored if the role is specified as master_admin.
    # @param options [Object] additional options
    #
    # source://cloudinary//lib/cloudinary/account_api.rb#112
    def update_user(user_id, name = T.unsafe(nil), email = T.unsafe(nil), role = T.unsafe(nil), sub_account_ids = T.unsafe(nil), options = T.unsafe(nil)); end

    # Updates the specified user group.
    #
    # @param group_id [String] The ID of the user group to update.
    # @param name [String] The name for the user group.
    # @param options [Object] additional options
    #
    # source://cloudinary//lib/cloudinary/account_api.rb#174
    def update_user_group(group_id, name, options = T.unsafe(nil)); end

    # Returns the user with the specified ID.
    #
    # @param user_id [String] The ID of the user.
    # @param options [Object] additional options
    #
    # source://cloudinary//lib/cloudinary/account_api.rb#126
    def user(user_id, options = T.unsafe(nil)); end

    # Retrieves the details of the specified user group.
    #
    # @param group_id [String] The ID of the user group to retrieve.
    # @param options [Object] additional options
    #
    # source://cloudinary//lib/cloudinary/account_api.rb#214
    def user_group(group_id, options = T.unsafe(nil)); end

    # Lists users in the specified user group.
    #
    # @param group_id [String] The ID of the user group.
    # @param options [Object] additional options
    #
    # source://cloudinary//lib/cloudinary/account_api.rb#221
    def user_group_users(group_id, options = T.unsafe(nil)); end

    # Lists user groups in the account.
    #
    # @param options [Object] additional options
    #
    # source://cloudinary//lib/cloudinary/account_api.rb#207
    def user_groups(options = T.unsafe(nil)); end

    # Get a list of the users according to filters.
    #
    # @option options
    # @option options
    # @option options
    # @param pending [Boolean] Optional. Limit results to pending users (true), users that are not pending (false), or all users (null)
    # @param user_ids [Array<String>] Optional. List of user IDs. Up to 100
    # @param prefix [String] Optional. Search by prefix of the user's name or email. Case-insensitive
    # @param sub_account_id [String] Optional. Return only users who have access to the given sub-account
    # @param options [Object] Generic advanced options map, see online documentation.
    # @raise [Cloudinary::Api::Error] If the request fails.
    # @return [Cloudinary::Api::Response] the users' details.
    #
    # source://cloudinary//lib/cloudinary/account_api.rb#145
    def users(pending = T.unsafe(nil), user_ids = T.unsafe(nil), prefix = T.unsafe(nil), sub_account_id = T.unsafe(nil), options = T.unsafe(nil)); end

    private

    # source://cloudinary//lib/cloudinary/account_api.rb#281
    def call_account_api(method, uri, params, options); end
  end
end

# source://cloudinary//lib/cloudinary/base_api.rb#37
Cloudinary::AccountApi::AlreadyExists = Cloudinary::BaseApi::AlreadyExists

# source://cloudinary//lib/cloudinary/base_api.rb#37
Cloudinary::AccountApi::AuthorizationRequired = Cloudinary::BaseApi::AuthorizationRequired

# source://cloudinary//lib/cloudinary/base_api.rb#37
Cloudinary::AccountApi::BadRequest = Cloudinary::BaseApi::BadRequest

# source://cloudinary//lib/cloudinary/base_api.rb#37
Cloudinary::AccountApi::Error = Cloudinary::BaseApi::Error

# source://cloudinary//lib/cloudinary/base_api.rb#37
Cloudinary::AccountApi::GeneralError = Cloudinary::BaseApi::GeneralError

# source://cloudinary//lib/cloudinary/base_api.rb#37
Cloudinary::AccountApi::NotAllowed = Cloudinary::BaseApi::NotAllowed

# source://cloudinary//lib/cloudinary/base_api.rb#37
Cloudinary::AccountApi::NotFound = Cloudinary::BaseApi::NotFound

# source://cloudinary//lib/cloudinary/base_api.rb#37
Cloudinary::AccountApi::RateLimited = Cloudinary::BaseApi::RateLimited

# source://cloudinary//lib/cloudinary/base_api.rb#37
Cloudinary::AccountApi::Response = Cloudinary::BaseApi::Response

# source://cloudinary//lib/cloudinary/account_config.rb#2
module Cloudinary::AccountConfig
  include ::Cloudinary::BaseConfig

  # source://cloudinary//lib/cloudinary/account_config.rb#8
  def load_config_from_env; end

  private

  # source://cloudinary//lib/cloudinary/account_config.rb#22
  def config_from_parsed_url(parsed_url); end

  # source://cloudinary//lib/cloudinary/account_config.rb#14
  def env_url; end

  # source://cloudinary//lib/cloudinary/account_config.rb#18
  def expected_scheme; end
end

# source://cloudinary//lib/cloudinary/account_config.rb#5
Cloudinary::AccountConfig::ENV_URL = T.let(T.unsafe(nil), String)

# source://cloudinary//lib/cloudinary/account_config.rb#6
Cloudinary::AccountConfig::SCHEME = T.let(T.unsafe(nil), String)

# source://cloudinary//lib/cloudinary/analytics.rb#4
module Cloudinary::Analytics
  extend ::Cloudinary::Analytics

  # Encodes a semVer-like version string.
  #
  # Example:
  #  input:      '1.24.0'
  #  explode:    ['1','24','0']
  #  pad:        ['01','24','00']
  #  reverse:    ['00', '24', '01']
  #  implode:    '002401'
  #  int:        2401
  #  binary:     '100101100001'
  #  padded:     '000000100101100001'
  #  str_split:  ['000000', '100101', '100001']
  #  getKey:     ['A', 'l', 'h']
  #  implode:    'Alh'
  #
  # @param version [String] Can be either x.y.z or x.y
  # @raise [RangeError] when version is larger than 43.21.26
  # @return [String] A string built from 3 characters of the base64 table
  #
  # source://cloudinary//lib/cloudinary/analytics.rb#116
  def encode_version(version); end

  # Gets the key for binary value.
  #
  # @param binary_value [String] The value.
  # @return [Array, Object] The key for the binary value.
  #
  # source://cloudinary//lib/cloudinary/analytics.rb#135
  def get_key(binary_value); end

  # source://cloudinary//lib/cloudinary/analytics.rb#141
  def initialize_char_codes; end

  # Converts integer to left padded binary string.
  #
  # @param integer [Integer] The input.
  # @param pad_num [Integer] The num of padding chars.
  # @return [String] The padded binary string.
  #
  # source://cloudinary//lib/cloudinary/analytics.rb#153
  def int_to_padded_bin(integer, pad_num); end

  # Sets the product code.
  #
  # Used for integrations.
  #
  # @param product [String] The product code to set. 'A' is for the official SDK. 'B' for integrations.
  # @return [void]
  #
  # source://cloudinary//lib/cloudinary/analytics.rb#53
  def product(product); end

  # Gets the SDK analytics signature query parameter.
  #
  # @return [String] The SDK signature query parameter.
  #
  # source://cloudinary//lib/cloudinary/analytics.rb#25
  def sdk_analytics_query_param; end

  # Gets the SDK signature by encoding the SDK version and tech version.
  #
  # @return [String] The SDK signature.
  #
  # source://cloudinary//lib/cloudinary/analytics.rb#32
  def sdk_analytics_signature; end

  # Sets the SDK code.
  #
  # Used for integrations.
  #
  # @param sdk_code [String] The SDK code to set.
  # @return [void]
  #
  # source://cloudinary//lib/cloudinary/analytics.rb#66
  def sdk_code(sdk_code); end

  # Sets the SDK version.
  #
  # Used for integrations.
  #
  # @param sdk_version [String] The SDK version to set (MAJOR.MINOR.PATCH), for example: "1.0.0".
  # @return [void]
  #
  # source://cloudinary//lib/cloudinary/analytics.rb#79
  def sdk_version(sdk_version); end

  # Sets the tech version.
  #
  # Used for integrations.
  #
  # @param tech_version [String] The tech version to set (MAJOR.MINOR), for example: "1.0".
  # @return [void]
  #
  # source://cloudinary//lib/cloudinary/analytics.rb#92
  def tech_version(tech_version); end
end

# The version of the algorithm
#
# source://cloudinary//lib/cloudinary/analytics.rb#8
Cloudinary::Analytics::ALGO_VERSION = T.let(T.unsafe(nil), String)

# source://cloudinary//lib/cloudinary/analytics.rb#17
Cloudinary::Analytics::BINARY_PAD_SIZE = T.let(T.unsafe(nil), Integer)

# source://cloudinary//lib/cloudinary/analytics.rb#16
Cloudinary::Analytics::CHARS = T.let(T.unsafe(nil), String)

# source://cloudinary//lib/cloudinary/analytics.rb#7
Cloudinary::Analytics::QUERY_KEY = T.let(T.unsafe(nil), String)

# Cloudinary Ruby SDK
#
# source://cloudinary//lib/cloudinary/analytics.rb#9
Cloudinary::Analytics::SDK_CODE = T.let(T.unsafe(nil), String)

# source://cloudinary//lib/cloudinary/api.rb#1
class Cloudinary::Api
  extend ::Cloudinary::BaseApi

  class << self
    # Creates a new metadata field definition.
    #
    # @param field [Hash] The field to add.
    # @param options [Hash] The optional parameters.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/admin_api#create_a_metadata_field
    #
    # source://cloudinary//lib/cloudinary/api.rb#1039
    def add_metadata_field(field, options = T.unsafe(nil)); end

    # Creates a new metadata rule definition.
    #
    # @param rule [Hash] The rule to add.
    # @param options [Hash] The optional parameters.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/conditional_metadata_rules_api#create_a_metadata_rule
    #
    # source://cloudinary//lib/cloudinary/api.rb#1218
    def add_metadata_rule(rule, options = T.unsafe(nil)); end

    # Relates an asset to other assets by public IDs.
    #
    # @param public_id [String] The public ID of the asset.
    # @param assets_to_relate [String|Array] The array of up to 10 fully_qualified_public_ids given as
    #   resource_type/type/public_id.
    # @param options [Hash] The optional parameters. See the
    #   {https://cloudinary.com/documentation/admin_api#add_related_assets Admin API} documentation.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    #
    # source://cloudinary//lib/cloudinary/api.rb#442
    def add_related_assets(public_id, assets_to_relate, options = T.unsafe(nil)); end

    # Relates an asset to other assets by asset IDs.
    #
    # @param asset_id [String] The asset ID of the asset to update.
    # @param assets_to_relate [String|Array] The array of up to 10 asset IDs.
    # @param options [Hash] The optional parameters. See the
    #   {https://cloudinary.com/documentation/admin_api#add_related_assets_by_asset_id Admin API} documentation.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    #
    # source://cloudinary//lib/cloudinary/api.rb#460
    def add_related_assets_by_asset_ids(asset_id, assets_to_relate, options = T.unsafe(nil)); end

    # Analyzes an asset with the requested analysis type.
    #
    # @param input_type [Object] The type of input for the asset to analyze ('uri').
    # @param analysis_type [Object] The type of analysis to run ('google_tagging', 'captioning', 'fashion').
    # @param options [Hash] The optional parameters.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    #
    # source://cloudinary//lib/cloudinary/api.rb#1272
    def analyze(input_type, analysis_type, options = T.unsafe(nil)); end

    # Execute a call api for input params.
    #
    # @param method [Object] The method for a request
    # @param uri [Object] The uri for a request
    # @param params [Object] Additional params
    # @param options [Object] Additional options
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response] Returned response from Cloudinary
    #
    # source://cloudinary//lib/cloudinary/api.rb#1291
    def call_api(method, uri, params, options); end

    # Protected function that assists with performing an API call to the metadata_fields part of the Admin API.
    #
    # @param method [Symbol] The HTTP method. Valid methods: get, post, put, delete
    # @param uri [Array] REST endpoint of the API (without 'metadata_fields')
    # @param params [Hash] Query/body parameters passed to the method
    # @param options [Hash] Additional options. Can be an override of the configuration, headers, etc.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response] Returned response from Cloudinary
    #
    # source://cloudinary//lib/cloudinary/api.rb#1327
    def call_metadata_api(method, uri, params, options); end

    # Protected function that assists with performing an API call to the metadata_rules part of the Admin API.
    #
    # @param method [Symbol] The HTTP method. Valid methods: get, post, put, delete
    # @param uri [Array] REST endpoint of the API (without 'metadata_rules')
    # @param params [Hash] Query/body parameters passed to the method
    # @param options [Hash] Additional options. Can be an override of the configuration, headers, etc.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response] Returned response from Cloudinary
    #
    # source://cloudinary//lib/cloudinary/api.rb#1343
    def call_metadata_rules_api(method, uri, params, options); end

    # Retrieves account configuration details.
    #
    # @param options [Hash] The optional parameters.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/admin_api#config
    #
    # source://cloudinary//lib/cloudinary/api.rb#26
    def config(options = T.unsafe(nil)); end

    # Creates a new empty folder.
    #
    # @param folder_name [String] The full path of the new folder to create.
    # @param options [Hash] The optional parameters.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/admin_api#create_folder
    #
    # source://cloudinary//lib/cloudinary/api.rb#746
    def create_folder(folder_name, options = T.unsafe(nil)); end

    # Creates a new, custom streaming profile.
    #
    # @param name [String] The name to assign to the new streaming profile.
    #   The name is case-insensitive and can contain alphanumeric characters, underscores (_) and
    #   hyphens (-). If the name is of a predefined profile, the profile will be modified.
    # @param options [Hash] The optional parameters. See the
    #   {https://cloudinary.com/documentation/admin_api#create_a_streaming_profile Admin API} documentation.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/admin_api#create_a_streaming_profile
    #
    # source://cloudinary//lib/cloudinary/api.rb#857
    def create_streaming_profile(name, options = T.unsafe(nil)); end

    # Creates a named transformation.
    #
    # @param name [String] The name of the transformation.
    # @param definition [String|Hash] The transformation. Can be a string or a hash. For example:
    #   "w_150,h_100,c_fill" or !{"width" => 150, "height" => 100, "crop" => "fill"}.
    # @param options [Hash] The optional parameters.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/admin_api#create_named_transformation
    #
    # source://cloudinary//lib/cloudinary/api.rb#603
    def create_transformation(name, definition, options = T.unsafe(nil)); end

    # Creates a new upload mapping.
    #
    # @param name [String] The name of the folder to map.
    # @param options [Hash] The optional parameters. See the
    #   {https://cloudinary.com/documentation/admin_api#create_an_upload_mapping Admin API} documentation.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/admin_api#create_an_upload_mapping
    #
    # source://cloudinary//lib/cloudinary/api.rb#838
    def create_upload_mapping(name, options = T.unsafe(nil)); end

    # Creates a new upload preset.
    #
    # @param options [Hash] The optional parameters. See the
    #   {https://cloudinary.com/documentation/admin_api#create_an_upload_preset Admin API} documentation.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/admin_api#create_an_upload_preset
    #
    # source://cloudinary//lib/cloudinary/api.rb#682
    def create_upload_preset(options = T.unsafe(nil)); end

    # Deletes all assets of the specified asset and delivery type, including their derived assets.
    #
    # Supports deleting up to a maximum of 1000 original assets in a single call.
    #
    # https://cloudinary.com/documentation/admin_api#delete_resources
    #
    # @param options [Hash] The optional parameters. See the
    #   {https://cloudinary.com/documentation/admin_api#delete_resources Admin API} documentation.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    #
    # source://cloudinary//lib/cloudinary/api.rb#367
    def delete_all_resources(options = T.unsafe(nil)); end

    # Deletes entries in a metadata single or multi-select field's datasource.
    #
    # Deletes (blocks) the datasource (list) entries from the specified metadata field definition. Sets the state of
    # the entries to inactive. This is a soft delete. The entries still exist in the database and can be reactivated
    # using the restoreDatasourceEntries method.
    #
    # @param field_external_id [String] The ID of the field to update.
    # @param entries_external_id [Array] The IDs of the entries to delete from the data source.
    # @param options [Hash] The optional parameters.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/admin_api#delete_entries_in_a_metadata_field_datasource
    #
    # source://cloudinary//lib/cloudinary/api.rb#1106
    def delete_datasource_entries(field_external_id, entries_external_id, options = T.unsafe(nil)); end

    # Deletes derived assets identified by transformation and public_ids.
    #
    # @param public_ids [String|Array] The public IDs for which you want to delete derived assets.
    # @param transformations [String|Array|Hash] The transformation(s) associated with the derived assets to delete.
    # @param options [Hash] The optional parameters. See the
    #   {https://cloudinary.com/documentation/admin_api#resources Admin API} documentation.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    #
    # source://cloudinary//lib/cloudinary/api.rb#421
    def delete_derived_by_transformation(public_ids, transformations, options = T.unsafe(nil)); end

    # Deletes the specified derived assets by derived asset ID.
    #
    # The derived asset IDs for a particular original asset are returned when calling the {.resource} method to
    # return the details of a single asset.
    #
    # @param derived_resource_ids [String|Array] The derived asset IDs (up to 100 ids).
    # @param options [Hash] The optional parameters.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/admin_api##delete_resources
    #
    # source://cloudinary//lib/cloudinary/api.rb#406
    def delete_derived_resources(derived_resource_ids, options = T.unsafe(nil)); end

    # Deletes an empty folder.
    #
    # The specified folder cannot contain any assets, but can have empty descendant sub-folders.
    #
    # @param path [String] The full path of the empty folder to delete.
    # @param options [Hash] The optional parameters.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/admin_api#delete_folder
    #
    # source://cloudinary//lib/cloudinary/api.rb#732
    def delete_folder(path, options = T.unsafe(nil)); end

    # Deletes a metadata field definition by external ID.
    #
    # The external ID is immutable. Therefore, once deleted, the field's external ID can no longer be used for
    # future purposes.
    #
    # @param field_external_id [String] The ID of the field to delete.
    # @param options [Hash] The optional parameters.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/admin_api#delete_a_metadata_field_by_external_id
    #
    # source://cloudinary//lib/cloudinary/api.rb#1085
    def delete_metadata_field(field_external_id, options = T.unsafe(nil)); end

    # Deletes a metadata rule definition by external ID.
    #
    # The rule should no longer be considered a valid candidate for all other endpoints
    # (it will not show up in the list of rules, etc).
    #
    # @param external_id [String] The ID of the rule to delete.
    # @param options [Hash] The optional parameters.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/conditional_metadata_rules_api#delete_a_metadata_rule_by_id
    #
    # source://cloudinary//lib/cloudinary/api.rb#1257
    def delete_metadata_rule(external_id, options = T.unsafe(nil)); end

    # Unrelates an asset from other assets by public IDs.
    #
    # @param public_id [String] The public ID of the asset.
    # @param assets_to_unrelate [String|Array] The array of up to 10 fully_qualified_public_ids given as
    #   resource_type/type/public_id.
    # @param options [Hash] The optional parameters. See the
    #   {https://cloudinary.com/documentation/admin_api#delete_related_assets Admin API} documentation.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    #
    # source://cloudinary//lib/cloudinary/api.rb#477
    def delete_related_assets(public_id, assets_to_unrelate, options = T.unsafe(nil)); end

    # Unrelates an asset from other assets by asset IDs.
    #
    # @param asset_id [String] The asset ID of the asset to update.
    # @param assets_to_unrelate [String|Array] The array of up to 10 asset IDs.
    # @param options [Hash] The optional parameters. See the
    #   {https://cloudinary.com/documentation/admin_api#delete_related_assets_by_asset_id Admin API} documentation.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    #
    # source://cloudinary//lib/cloudinary/api.rb#495
    def delete_related_assets_by_asset_ids(asset_id, assets_to_unrelate, options = T.unsafe(nil)); end

    # Merge params with a certain set of options.
    #
    # @param options [Object] Set of options
    # @param params [Hash] Additional params
    # @return [Hash] Result of hash merging
    #
    # source://cloudinary//lib/cloudinary/api.rb#1389
    def delete_resource_params(options, params = T.unsafe(nil)); end

    # Deletes the specified assets.
    #
    # @param public_ids [String|Array] The public IDs of the assets to delete (up to 100).
    # @param options [Hash] The optional parameters. See the
    #   {https://cloudinary.com/documentation/admin_api#sdelete_resources Admin API} documentation.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/admin_api#delete_resources
    #
    # source://cloudinary//lib/cloudinary/api.rb#327
    def delete_resources(public_ids, options = T.unsafe(nil)); end

    # Deletes assets by prefix.
    #
    # Delete up to 1000 original assets, along with their derived assets, where the public ID starts with the
    # specified prefix.
    #
    # @param prefix [String] The Public ID prefix.
    # @param options [Hash] The optional parameters. See the
    #   {https://cloudinary.com/documentation/admin_api#delete_resources Admin API} documentation.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/admin_api#delete_resources
    #
    # source://cloudinary//lib/cloudinary/api.rb#348
    def delete_resources_by_prefix(prefix, options = T.unsafe(nil)); end

    # Deletes assets with the specified tag, including their derived assets.
    #
    # Supports deleting up to a maximum of 1000 original assets in a single call.
    #
    # {https://cloudinary.com/documentation/admin_api#delete_resources_by_tags Admin API} documentation.
    #
    # @param tag [String] The tag value of the assets to delete.
    # @param options [Hash] The optional parameters. See the
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/admin_api#delete_resources_by_tags
    #
    # source://cloudinary//lib/cloudinary/api.rb#387
    def delete_resources_by_tag(tag, options = T.unsafe(nil)); end

    # Deletes or reverts the specified streaming profile.
    #
    # For custom streaming profiles, deletes the specified profile.
    # For built-in streaming profiles, if the built-in profile was modified, reverts the profile to the original
    # settings.
    # For built-in streaming profiles that have not been modified, the Delete method returns an error.
    #
    # @param name [String] The name of the streaming profile to delete or revert.
    # @param options [Hash] The optional parameters.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/admin_api#delete_or_revert_the_specified_streaming_profile
    #
    # source://cloudinary//lib/cloudinary/api.rb#892
    def delete_streaming_profile(name, options = T.unsafe(nil)); end

    # Deletes the specified stored transformation.
    #
    # Deleting a transformation also deletes all the stored derived assets based on this transformation (up to 1000).
    # The method returns an error if there are more than 1000 derived assets based on this transformation.
    #
    # @param transformation [String|Hash] The transformation to delete. Can be either a string or an array of
    #   parameters. For example:
    #   "w_150,h_100,c_fill" or !{"width" => 150, "height" => 100,"crop" => "fill"}.
    # @param options [Hash] The optional parameters. See the
    #   {https://cloudinary.com/documentation/admin_api#delete_transformation Admin API} documentation.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/admin_api#delete_transformation
    #
    # source://cloudinary//lib/cloudinary/api.rb#566
    def delete_transformation(transformation, options = T.unsafe(nil)); end

    # Deletes an upload mapping.
    #
    # @param name [String] The name of the upload mapping folder to delete.
    # @param options [Hash] The optional parameters.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/admin_api#delete_an_upload_mapping
    #
    # source://cloudinary//lib/cloudinary/api.rb#806
    def delete_upload_mapping(name, options = T.unsafe(nil)); end

    # Deletes the specified upload preset.
    #
    # @param The [String] name of the upload preset to delete.
    # @param options [Hash] The optional parameters.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/admin_api#delete_an_upload_preset
    #
    # source://cloudinary//lib/cloudinary/api.rb#652
    def delete_upload_preset(name, options = T.unsafe(nil)); end

    # Gets the breakpoints.
    #
    # Returns breakpoints if defined, otherwise checks the cache(if configured), otherwise fall backs to static
    # calculation.
    #
    # @param public_id [String] Resource source.
    # @param options [Hash] The optional parameters.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    #
    # source://cloudinary//lib/cloudinary/api.rb#989
    def get_breakpoints(public_id, options); end

    # Gets details of a single streaming profile by name.
    #
    # @param name [String] The identification name of the streaming profile.
    # @param options [Hash] The optional parameters.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/admin_api#get_details_of_a_single_streaming_profile
    #
    # source://cloudinary//lib/cloudinary/api.rb#906
    def get_streaming_profile(name, options = T.unsafe(nil)); end

    # Lists all metadata field definitions.
    #
    # @param options [Hash] The optional parameters.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/admin_api#get_metadata_fields
    #
    # source://cloudinary//lib/cloudinary/api.rb#1009
    def list_metadata_fields(options = T.unsafe(nil)); end

    # Lists all metadata rules definitions.
    #
    # @param options [Hash] The optional parameters.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/conditional_metadata_rules_api#get_metadata_rules
    #
    # source://cloudinary//lib/cloudinary/api.rb#1203
    def list_metadata_rules(options = T.unsafe(nil)); end

    # source://cloudinary//lib/cloudinary/api.rb#1464
    def list_resources_params(options, params = T.unsafe(nil)); end

    # Lists streaming profiles including built-in and custom profiles.
    #
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/admin_api#get_adaptive_streaming_profiles
    #
    # source://cloudinary//lib/cloudinary/api.rb#873
    def list_streaming_profiles; end

    # Gets a single metadata field definition by external ID.
    #
    # @param field_external_id [String] The external ID of the field to retrieve.
    # @param options [Hash] The optional parameters.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/admin_api#get_a_metadata_field_by_external_id
    #
    # source://cloudinary//lib/cloudinary/api.rb#1023
    def metadata_field_by_field_id(field_external_id, options = T.unsafe(nil)); end

    # Filter hash with specific keys.
    #
    # @param hash [Object] Input hash
    # @param keys [Array] Input keys
    # @return [Hash] Result of hash filtering
    #
    # source://cloudinary//lib/cloudinary/api.rb#1376
    def only(hash, *keys); end

    # Parse a json response.
    #
    # @param response [Object] Returned response from Cloudinary
    # @raise [Cloudinary::Api::GeneralError]
    # @return [Hash] Decoded string
    #
    # source://cloudinary//lib/cloudinary/api.rb#1311
    def parse_json_response(response); end

    # Tests the reachability of the Cloudinary API.
    #
    # @param options [Hash] The optional parameters.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response] The current status of the Cloudinary servers
    # @see https://cloudinary.com/documentation/admin_api#ping
    #
    # source://cloudinary//lib/cloudinary/api.rb#13
    def ping(options = T.unsafe(nil)); end

    # Prepares optional parameters for add/update_metadata_field API calls.
    #
    # @param options [Hash] Additional options
    # @return [Object] Optional parameters
    #
    # source://cloudinary//lib/cloudinary/api.rb#1065
    def prepare_metadata_field_params(field); end

    # Prepares optional parameters for asset/assetByAssetId API calls.
    #
    # @param options [Hash] Additional options
    # @return [Object] Optional parameters
    #
    # source://cloudinary//lib/cloudinary/api.rb#1353
    def prepare_resource_details_params(options); end

    # Publish resources by ids.
    #
    # @param publicIds [Array] List of public ids
    # @param options [Hash] Additional options
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response] Returned response from Cloudinary
    #
    # source://cloudinary//lib/cloudinary/api.rb#1433
    def publish_by_ids(publicIds, options = T.unsafe(nil)); end

    # Publish resources by a prefix.
    #
    # @param prefix [String] The name of a prefix
    # @param options [Hash] Additional options
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response] Returned response from Cloudinary
    #
    # source://cloudinary//lib/cloudinary/api.rb#1415
    def publish_by_prefix(prefix, options = T.unsafe(nil)); end

    # Publish resources by a tag.
    #
    # @param tag [String] The name of a tag
    # @param options [Hash] Additional options
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response] Returned response from Cloudinary
    #
    # source://cloudinary//lib/cloudinary/api.rb#1424
    def publish_by_tag(tag, options = T.unsafe(nil)); end

    # Publish resources.
    #
    # @param options [Hash] Additional options
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response] Returned response from Cloudinary
    #
    # source://cloudinary//lib/cloudinary/api.rb#1404
    def publish_resources(options = T.unsafe(nil)); end

    # Renames existing asset folder.
    #
    # @param from_path [String] The full path of an existing asset folder.
    # @param to_path [String] The full path of the new asset folder.
    # @param options [Hash] The optional parameters.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/admin_api#rename_folder
    #
    # source://cloudinary//lib/cloudinary/api.rb#761
    def rename_folder(from_path, to_path, options = T.unsafe(nil)); end

    # Reorders metadata field datasource. Currently supports only value.
    #
    # @param field_external_id [String] The ID of the metadata field
    # @param order_by [String] Criteria for the order. Currently supports only value
    # @param direction [String] Optional (gets either asc or desc)
    # @param options [Hash] Configuration options
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    #
    # source://cloudinary//lib/cloudinary/api.rb#1171
    def reorder_metadata_field_datasource(field_external_id, order_by, direction = T.unsafe(nil), options = T.unsafe(nil)); end

    # Reorders metadata fields.
    #
    # @param order_by [String] Criteria for the order (one of the fields 'label', 'external_id', 'created_at').
    # @param direction [String] Optional (gets either asc or desc).
    # @param options [Hash] Configuration options.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    #
    # source://cloudinary//lib/cloudinary/api.rb#1187
    def reorder_metadata_fields(order_by, direction = T.unsafe(nil), options = T.unsafe(nil)); end

    # Returns the details of the specified asset and all its derived assets.
    #
    # Note that if you only need details about the original asset,
    # you can also use the Uploader::upload or Uploader::explicit methods, which return the same information and
    # are not rate limited.
    #
    # @param public_id [String] The public ID of the asset.
    # @param options [Hash] The optional parameters. See the
    #   {https://cloudinary.com/documentation/admin_api#get_the_details_of_a_single_resource Admin API} documentation.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/admin_api#get_the_details_of_a_single_resource
    #
    # source://cloudinary//lib/cloudinary/api.rb#230
    def resource(public_id, options = T.unsafe(nil)); end

    # Returns the details of the specified asset and all its derived assets by asset id.
    #
    # Note that if you only need details about the original asset,
    # you can also use the Uploader::upload or Uploader::explicit methods, which return the same information and
    # are not rate limited.
    #
    # @param asset_id [String] The Asset ID of the asset.
    # @param options [Hash] The optional parameters. See the <a href=https://cloudinary.com/documentation/admin_api#get_the_details_of_a_single_resource target="_blank"> Admin API</a> documentation.
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/admin_api#get_the_details_of_a_single_resource
    #
    # source://cloudinary//lib/cloudinary/api.rb#249
    def resource_by_asset_id(asset_id, options = T.unsafe(nil)); end

    # Lists all uploaded assets filtered by any specified options.
    #
    # @param options [Hash] The optional parameters. See the
    #   {https://cloudinary.com/documentation/admin_api#get_resources Admin API} documentation.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/admin_api#get_resources
    #
    # source://cloudinary//lib/cloudinary/api.rb#66
    def resource_types(options = T.unsafe(nil)); end

    # Lists all uploaded assets filtered by any specified options.
    #
    # see https://cloudinary.com/documentation/admin_api#get_resources Get all images
    #
    # @param options [Hash] The optional parameters. See the
    #   {https://cloudinary.com/documentation/admin_api#get_resources Admin API} documentation.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/admin_api#get_resources
    #
    # source://cloudinary//lib/cloudinary/api.rb#82
    def resources(options = T.unsafe(nil)); end

    # Returns all assets stored directly in a specified asset folder, regardless of the public ID paths of those assets.
    #
    # <a href=https://cloudinary.com/documentation/dynamic_folders#new_admin_api_endpoints target="_blank"> Admin API</a> documentation.
    #
    # @param asset_folder [String] The requested asset folder.
    # @param options [Hash] The optional parameters. See the
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/dynamic_folders#new_admin_api_endpoints
    #
    # source://cloudinary//lib/cloudinary/api.rb#196
    def resources_by_asset_folder(asset_folder, options = T.unsafe(nil)); end

    # Lists assets with the specified asset IDs.
    #
    # <a href=https://cloudinary.com/documentation/admin_api#get_resources target="_blank"> Admin API</a> documentation.
    #
    # @param asset_ids [Object] The requested asset IDs.
    # @param options [Hash] The optional parameters. See the
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/admin_api#get_resources
    #
    # source://cloudinary//lib/cloudinary/api.rb#180
    def resources_by_asset_ids(asset_ids, options = T.unsafe(nil)); end

    # Lists assets with the specified contextual metadata.
    #
    # This method does not return matching deleted assets, even if they have been backed up.
    #
    # @param key [String] Only assets with this context key are returned.
    # @param value [String] Only assets with this context value for the specified context key are returned.
    #   If this parameter is not provided, all assets with the specified context key are returned,
    #   regardless of the key value.
    # @param options [Hash] The optional parameters. See the
    #   {https://cloudinary.com/documentation/admin_api#get_resources_by_context Admin API} documentation.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/admin_api#get_resources_by_context
    #
    # source://cloudinary//lib/cloudinary/api.rb#145
    def resources_by_context(key, value = T.unsafe(nil), options = T.unsafe(nil)); end

    # Lists assets with the specified public IDs.
    #
    # @param public_ids [String|Array] The requested public_ids (up to 100).
    # @param options [Hash] The optional parameters. See the
    #   {https://cloudinary.com/documentation/admin_api#get_resources Admin API} documentation.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/admin_api#get_resources
    #
    # source://cloudinary//lib/cloudinary/api.rb#162
    def resources_by_ids(public_ids, options = T.unsafe(nil)); end

    # Lists assets currently in the specified moderation queue and status.
    #
    # @param kind [String] Type of image moderation queue to list.
    #   Valid values:  "manual", "webpurify", "aws_rek", or "metascan".
    # @param status [String] Only assets with this moderation status will be returned.
    #   Valid values: "pending", "approved", "rejected".
    # @param options [Hash] The optional parameters. See the
    #   {https://cloudinary.com/documentation/admin_api#get_resources_in_moderation_queues Admin API} documentation.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/admin_api#get_resources_in_moderation_queues
    #
    # source://cloudinary//lib/cloudinary/api.rb#123
    def resources_by_moderation(kind, status, options = T.unsafe(nil)); end

    # Lists assets with the specified tag.
    #
    # This method does not return matching deleted assets, even if they have been backed up.
    #
    # @param tag [String] The tag value.
    # @param options [Hash] The optional parameters. See the
    #   {https://cloudinary.com/documentation/admin_api#get_resources_by_tag Admin API} documentation.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/admin_api#get_resources_by_tag
    #
    # source://cloudinary//lib/cloudinary/api.rb#103
    def resources_by_tag(tag, options = T.unsafe(nil)); end

    # source://cloudinary//lib/cloudinary/api.rb#1458
    def resources_params(options, params = T.unsafe(nil)); end

    # Reverts to the latest backed up version of the specified deleted assets.
    #
    # @param public_ids [String|Array] The public IDs of the backed up assets to restore. They can be existing or
    #   deleted assets.
    # @param options [Hash] The optional parameters. See the
    #   {https://cloudinary.com/documentation/admin_api#restore_resources Admin API} documentation.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/admin_api#restore_resources
    #
    # source://cloudinary//lib/cloudinary/api.rb#266
    def restore(public_ids, options = T.unsafe(nil)); end

    # Restore entries in a metadata field datasource.
    #
    # Restores (unblocks) any previously deleted datasource entries for a specified metadata field definition.
    # Sets the state of the entries to active.
    #
    # @param field_external_id [String] The ID of the metadata field.
    # @param entries_external_ids [Array] An array of IDs of datasource entries to restore (unblock).
    # @param options [Hash] The optional parameters.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/admin_api#restore_entries_in_a_metadata_field_datasource
    #
    # source://cloudinary//lib/cloudinary/api.rb#1154
    def restore_metadata_field_datasource(field_external_id, entries_external_ids, options = T.unsafe(nil)); end

    # Lists all root folders.
    #
    # @param options [Hash] The optional parameters. See the
    #   {https://cloudinary.com/documentation/admin_api#get_root_folders Admin API} documentation.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/admin_api#get_root_folders
    #
    # source://cloudinary//lib/cloudinary/api.rb#697
    def root_folders(options = T.unsafe(nil)); end

    # Lists sub-folders.
    #
    # Returns the name and path of all the sub-folders of a specified parent folder. Limited to 2000 results.
    #
    # @param of_folder_path [String] The parent folder.
    # @param options [Hash] The optional parameters. See the
    #   {https://cloudinary.com/documentation/admin_api#get_subfolders Admin API} documentation.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/admin_api#get_subfolders
    #
    # source://cloudinary//lib/cloudinary/api.rb#715
    def subfolders(of_folder_path, options = T.unsafe(nil)); end

    # Lists all the tags currently used for a specified asset type.
    #
    # @param options [Hash] The optional parameters. See the
    #   {https://cloudinary.com/documentation/admin_api#get_tags Admin API} documentation.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/admin_api#get_tags
    #
    # source://cloudinary//lib/cloudinary/api.rb#511
    def tags(options = T.unsafe(nil)); end

    # Returns the details of a single transformation.
    #
    # @param transformation [String|Array] The transformation. Can be either a string or an array of parameters.
    #   For example: "w_150,h_100,c_fill" or array("width" => 150, "height" =>
    #   100,"crop" => "fill").
    # @param options [Hash] The optional parameters. See the
    #   {https://cloudinary.com/documentation/admin_api#get_transformation_details Admin API} documentation.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/admin_api#get_transformation_details
    #
    # source://cloudinary//lib/cloudinary/api.rb#544
    def transformation(transformation, options = T.unsafe(nil)); end

    # Generate a transformation string if an input a param is not a string.
    #
    # @param transformation [String|Hash] Input transformation param
    # @return [String] Result of transformation
    #
    # source://cloudinary//lib/cloudinary/api.rb#1396
    def transformation_string(transformation); end

    # Lists stored transformations.
    #
    # @param options [Hash] The optional parameters. See the
    #   {https://cloudinary.com/documentation/admin_api#get_transformations Admin API} documentation.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/admin_api#get_transformations
    #
    # source://cloudinary//lib/cloudinary/api.rb#527
    def transformations(options = T.unsafe(nil)); end

    # Updates details of an existing asset.
    #
    # Update one or more of the attributes associated with a specified asset. Note that you can also update
    # most attributes of an existing asset using the Uploader::explicit method, which is not rate limited.
    #
    # @param public_id [String|Array] The public ID of the asset to update.
    # @param options [Hash] The optional parameters. See the
    #   {https://cloudinary.com/documentation/admin_api#update_details_of_an_existing_resource Admin API} documentation.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/admin_api#update_details_of_an_existing_resource
    #
    # source://cloudinary//lib/cloudinary/api.rb#287
    def update(public_id, options = T.unsafe(nil)); end

    # Updates a metadata field by external ID.
    #
    # Updates a metadata field definition (partially, no need to pass the entire object) passed as JSON data.
    #
    # @param field_external_id [String] The ID of the field to update.
    # @param field [Hash] The field definition.
    # @param options [Hash] The optional parameters.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/admin_api#update_a_metadata_field_by_external_id
    #
    # source://cloudinary//lib/cloudinary/api.rb#1056
    def update_metadata_field(field_external_id, field, options = T.unsafe(nil)); end

    # Updates a metadata field datasource.
    #
    # Updates the datasource of a supported field type (currently enum or set), passed as JSON data. The
    # update is partial: datasource entries with an existing external_id will be updated and entries with new
    # external_id’s (or without external_id’s) will be appended.
    #
    # @param field_external_id [String] The ID of the field to update.
    # @param entries_external_id [Array] A list of datasource entries. Existing entries (according to entry id) will be
    #   updated. New entries will be added.
    # @param options [Hash] The optional parameters.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/admin_api#update_a_metadata_field_datasource
    #
    # source://cloudinary//lib/cloudinary/api.rb#1129
    def update_metadata_field_datasource(field_external_id, entries_external_id, options = T.unsafe(nil)); end

    # Updates a metadata rule by external ID.
    #
    # Updates an existing metadata rule definition. Expects a JSON object which defines the updated rule.
    #
    # @param external_id [String] The ID of the rule to update.
    # @param rule [Hash] The rule definition.
    # @param options [Hash] The optional parameters.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/conditional_metadata_rules_api#update_a_metadata_rule_by_id
    #
    # source://cloudinary//lib/cloudinary/api.rb#1237
    def update_metadata_rule(external_id, rule, options = T.unsafe(nil)); end

    # Build a link and prepare data for a call.
    #
    # @param access_mode [String] The access_mode of resources
    # @param by_key [Symbol] The new access mode to be set. Possible values: public, authenticated.
    # @param value [String|Array<String>] The value to assign
    # @param options [Hash] Additional options
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response] Returned response from Cloudinary
    #
    # source://cloudinary//lib/cloudinary/api.rb#1444
    def update_resources_access_mode(access_mode, by_key, value, options = T.unsafe(nil)); end

    # Update resources access mode. Resources are selected by the provided public_ids.
    #
    # @param access_mode [String] The access mode to set the resources to.
    # @param public_ids [Array] The ids by which to filter applicable resources
    # @param options [Hash] The optional parameters.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/admin_api#examples-8
    #
    # source://cloudinary//lib/cloudinary/api.rb#972
    def update_resources_access_mode_by_ids(access_mode, public_ids, options = T.unsafe(nil)); end

    # Update resources access mode. Resources are selected by the prefix.
    #
    # @param access_mode [String] The access mode to set the resources to.
    # @param prefix [String] The prefix by which to filter applicable resources
    # @param options [Hash] The optional parameters.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/admin_api#examples-8
    #
    # source://cloudinary//lib/cloudinary/api.rb#942
    def update_resources_access_mode_by_prefix(access_mode, prefix, options = T.unsafe(nil)); end

    # Update resources access mode. Resources are selected by the tag.
    #
    # @param access_mode [String] The access mode to set the resources to.
    # @param tag [String] The tag by which to filter applicable resources.
    # @param options [Hash] The optional parameters.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/admin_api#examples-8
    #
    # source://cloudinary//lib/cloudinary/api.rb#957
    def update_resources_access_mode_by_tag(access_mode, tag, options = T.unsafe(nil)); end

    # Updates an existing streaming profile.
    #
    # You can update both custom and built-in profiles. The specified list of representations replaces the previous list.
    #
    # {https://cloudinary.com/documentation/admin_api#create_a_streaming_profile Admin API} documentation.
    #
    # @param name [String] The name of the streaming profile to update.
    # @param options [Hash] The optional parameters. See the
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/admin_api#create_a_streaming_profile
    #
    # source://cloudinary//lib/cloudinary/api.rb#923
    def update_streaming_profile(name, options = T.unsafe(nil)); end

    # Updates the specified transformation.
    #
    # @param transformation [String|Hash] The transformation. Can be either a string or an array of parameters.
    #   For example: "w_150,h_100,c_fill" or !{"width" => 150, "height" =>
    #   100,"crop" => "fill"}.
    # @param updates [Hash] The update parameters. See the
    #   {https://cloudinary.com/documentation/admin_api#update_transformation Admin API} documentation.
    # @param options [Hash] The optional parameters.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/admin_api#update_transformation
    #
    # source://cloudinary//lib/cloudinary/api.rb#584
    def update_transformation(transformation, updates, options = T.unsafe(nil)); end

    # Updates an existing upload mapping with a new template (URL).
    #
    # @param name [String] The name of the upload mapping folder to remap.
    # @param options [Hash] The optional parameters. See the
    #   {https://cloudinary.com/documentation/admin_api#update_an_upload_mapping Admin API} documentation.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/admin_api#update_an_upload_mapping
    #
    # source://cloudinary//lib/cloudinary/api.rb#821
    def update_upload_mapping(name, options = T.unsafe(nil)); end

    # Updates the specified upload preset.
    #
    # {https://cloudinary.com/documentation/admin_api#update_an_upload_preset Admin API} documentation.
    #
    # @param name [String] The name of the upload preset.
    # @param options [Hash] The optional parameters. See the
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/admin_api#update_an_upload_preset
    #
    # source://cloudinary//lib/cloudinary/api.rb#667
    def update_upload_preset(name, options = T.unsafe(nil)); end

    # Returns the details of the specified upload mapping.
    #
    # Retrieve the mapped template (URL) of a specified upload mapping folder.
    #
    # @param name [String] The name of the upload mapping folder.
    # @param options [Hash] The optional parameters.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/admin_api#get_the_details_of_a_single_upload_mapping
    #
    # source://cloudinary//lib/cloudinary/api.rb#792
    def upload_mapping(name = T.unsafe(nil), options = T.unsafe(nil)); end

    # Lists upload mappings by folder and its mapped template (URL).
    #
    # @param options [Hash] The optional parameters. See the
    #   {https://cloudinary.com/documentation/admin_api#get_upload_mapping Admin API} documentation.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/admin_api#get_upload_mappings
    #
    # source://cloudinary//lib/cloudinary/api.rb#775
    def upload_mappings(options = T.unsafe(nil)); end

    # Retrieves the details of the specified upload preset.
    #
    # @param name [String] The name of the upload preset.
    # @param options [Hash] The optional parameters. See the
    #   {https://cloudinary.com/documentation/admin_api#get_the_details_of_a_single_upload_preset Admin API}
    #   documentation.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/admin_api#get_the_details_of_a_single_upload_preset
    #
    # source://cloudinary//lib/cloudinary/api.rb#638
    def upload_preset(name, options = T.unsafe(nil)); end

    # Lists existing upload presets.
    #
    # @param options [Hash] The optional parameters. See the
    #   {https://cloudinary.com/documentation/admin_api#get_upload_presets Admin API} documentation.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/admin_api#get_upload_presets
    #
    # source://cloudinary//lib/cloudinary/api.rb#622
    def upload_presets(options = T.unsafe(nil)); end

    # Gets cloud usage details.
    #
    # Returns a report detailing your current Cloudinary cloud usage details, including
    # storage, bandwidth, requests, number of assets, and add-on usage.
    # Note that numbers are updated periodically.
    #
    # @param options [Hash] The optional parameters. See the
    #   {https://cloudinary.com/documentation/admin_api#usage Admin API} documentation.
    # @raise [Cloudinary::Api:Error]
    # @return [Cloudinary::Api::Response]
    # @see https://cloudinary.com/documentation/admin_api#usage
    #
    # source://cloudinary//lib/cloudinary/api.rb#47
    def usage(options = T.unsafe(nil)); end

    # Find images based on their visual content.
    #
    # @param options [Hash] The optional parameters.
    # @raise [Cloudinary::Api::Error]
    # @return [Cloudinary::Api::Response]
    #
    # source://cloudinary//lib/cloudinary/api.rb#208
    def visual_search(options = T.unsafe(nil)); end
  end
end

# source://cloudinary//lib/cloudinary/base_api.rb#37
Cloudinary::Api::AlreadyExists = Cloudinary::BaseApi::AlreadyExists

# source://cloudinary//lib/cloudinary/base_api.rb#37
Cloudinary::Api::AuthorizationRequired = Cloudinary::BaseApi::AuthorizationRequired

# source://cloudinary//lib/cloudinary/base_api.rb#37
Cloudinary::Api::BadRequest = Cloudinary::BaseApi::BadRequest

# source://cloudinary//lib/cloudinary/base_api.rb#37
Cloudinary::Api::Error = Cloudinary::BaseApi::Error

# source://cloudinary//lib/cloudinary/base_api.rb#37
Cloudinary::Api::GeneralError = Cloudinary::BaseApi::GeneralError

# source://cloudinary//lib/cloudinary/api.rb#1456
Cloudinary::Api::LIST_RESOURCES_PARAMS = T.let(T.unsafe(nil), Array)

# source://cloudinary//lib/cloudinary/base_api.rb#37
Cloudinary::Api::NotAllowed = Cloudinary::BaseApi::NotAllowed

# source://cloudinary//lib/cloudinary/base_api.rb#37
Cloudinary::Api::NotFound = Cloudinary::BaseApi::NotFound

# source://cloudinary//lib/cloudinary/api.rb#1455
Cloudinary::Api::RESOURCES_PARAMS = T.let(T.unsafe(nil), Array)

# source://cloudinary//lib/cloudinary/base_api.rb#37
Cloudinary::Api::RateLimited = Cloudinary::BaseApi::RateLimited

# source://cloudinary//lib/cloudinary/base_api.rb#37
Cloudinary::Api::Response = Cloudinary::BaseApi::Response

# source://cloudinary//lib/cloudinary/auth_token.rb#8
module Cloudinary::AuthToken
  class << self
    # source://cloudinary//lib/cloudinary/auth_token.rb#73
    def digest(message, key); end

    # escape URI pattern using lowercase hex. For example "/" -> "%2f".
    #
    # source://cloudinary//lib/cloudinary/auth_token.rb#66
    def escape_to_lower(url); end

    # source://cloudinary//lib/cloudinary/auth_token.rb#13
    def generate(options = T.unsafe(nil)); end

    # Merge token2 to token1 returning a new
    # Requires to support Ruby 1.9
    #
    # source://cloudinary//lib/cloudinary/auth_token.rb#55
    def merge_auth_token(token1, token2); end
  end
end

# source://cloudinary//lib/cloudinary/auth_token.rb#11
Cloudinary::AuthToken::EMPTY_TOKEN = T.let(T.unsafe(nil), Hash)

# source://cloudinary//lib/cloudinary/auth_token.rb#9
Cloudinary::AuthToken::SEPARATOR = T.let(T.unsafe(nil), String)

# source://cloudinary//lib/cloudinary/auth_token.rb#10
Cloudinary::AuthToken::UNSAFE = T.let(T.unsafe(nil), Regexp)

# source://cloudinary//lib/cloudinary/base_api.rb#4
module Cloudinary::BaseApi
  # @raise [exception_class]
  #
  # source://cloudinary//lib/cloudinary/base_api.rb#41
  def call_json_api(method, api_url, payload, timeout, headers, proxy = T.unsafe(nil), user = T.unsafe(nil), password = T.unsafe(nil)); end

  private

  # source://cloudinary//lib/cloudinary/base_api.rb#70
  def call_cloudinary_api(method, uri, auth, params, options, &api_url_builder); end

  # source://cloudinary//lib/cloudinary/base_api.rb#89
  def get_authorization_header_value(auth); end

  # source://cloudinary//lib/cloudinary/base_api.rb#97
  def validate_authorization(api_key, api_secret, oauth_token); end

  class << self
    # @private
    #
    # source://cloudinary//lib/cloudinary/base_api.rb#35
    def extended(base); end
  end
end

# source://cloudinary//lib/cloudinary/base_api.rb#9
class Cloudinary::BaseApi::AlreadyExists < ::Cloudinary::BaseApi::Error; end

# source://cloudinary//lib/cloudinary/base_api.rb#13
class Cloudinary::BaseApi::AuthorizationRequired < ::Cloudinary::BaseApi::Error; end

# source://cloudinary//lib/cloudinary/base_api.rb#11
class Cloudinary::BaseApi::BadRequest < ::Cloudinary::BaseApi::Error; end

# source://cloudinary//lib/cloudinary/base_api.rb#6
class Cloudinary::BaseApi::Error < ::CloudinaryException; end

# source://cloudinary//lib/cloudinary/base_api.rb#12
class Cloudinary::BaseApi::GeneralError < ::Cloudinary::BaseApi::Error; end

# source://cloudinary//lib/cloudinary/base_api.rb#8
class Cloudinary::BaseApi::NotAllowed < ::Cloudinary::BaseApi::Error; end

# source://cloudinary//lib/cloudinary/base_api.rb#7
class Cloudinary::BaseApi::NotFound < ::Cloudinary::BaseApi::Error; end

# source://cloudinary//lib/cloudinary/base_api.rb#10
class Cloudinary::BaseApi::RateLimited < ::Cloudinary::BaseApi::Error; end

# source://cloudinary//lib/cloudinary/base_api.rb#15
class Cloudinary::BaseApi::Response < ::Hash
  # @return [Response] a new instance of Response
  #
  # source://cloudinary//lib/cloudinary/base_api.rb#18
  def initialize(response = T.unsafe(nil)); end

  # Returns the value of attribute rate_limit_allowed.
  #
  # source://cloudinary//lib/cloudinary/base_api.rb#16
  def rate_limit_allowed; end

  # Returns the value of attribute rate_limit_remaining.
  #
  # source://cloudinary//lib/cloudinary/base_api.rb#16
  def rate_limit_remaining; end

  # Returns the value of attribute rate_limit_reset_at.
  #
  # source://cloudinary//lib/cloudinary/base_api.rb#16
  def rate_limit_reset_at; end
end

# source://cloudinary//lib/cloudinary/base_config.rb#2
module Cloudinary::BaseConfig
  # @raise [NotImplementedError]
  #
  # source://cloudinary//lib/cloudinary/base_config.rb#22
  def load_config_from_env; end

  # source://cloudinary//lib/cloudinary/base_config.rb#3
  def load_from_url(url); end

  # source://cloudinary//lib/cloudinary/base_config.rb#18
  def update(new_config = T.unsafe(nil)); end

  private

  # @raise [NotImplementedError]
  #
  # source://cloudinary//lib/cloudinary/base_config.rb#28
  def config_from_parsed_url(parsed_url); end

  # @raise [NotImplementedError]
  #
  # source://cloudinary//lib/cloudinary/base_config.rb#32
  def env_url; end

  # @raise [NotImplementedError]
  #
  # source://cloudinary//lib/cloudinary/base_config.rb#36
  def expected_scheme; end

  # @return [Boolean]
  #
  # source://cloudinary//lib/cloudinary/base_config.rb#55
  def is_nested_key?(key); end

  # source://cloudinary//lib/cloudinary/base_config.rb#40
  def put_nested_key(key, value); end

  # source://cloudinary//lib/cloudinary/base_config.rb#59
  def setup_from_parsed_url(parsed_url); end
end

# source://cloudinary//lib/cloudinary/blob.rb#2
class Cloudinary::Blob < ::StringIO
  # @return [Blob] a new instance of Blob
  #
  # source://cloudinary//lib/cloudinary/blob.rb#6
  def initialize(data, options = T.unsafe(nil)); end

  # Returns the value of attribute content_type.
  #
  # source://cloudinary//lib/cloudinary/blob.rb#3
  def content_type; end

  # Returns the value of attribute original_filename.
  #
  # source://cloudinary//lib/cloudinary/blob.rb#3
  def original_filename; end

  # Returns the value of attribute original_filename.
  #
  # source://cloudinary//lib/cloudinary/blob.rb#3
  def path; end
end

# source://cloudinary//lib/cloudinary/cache.rb#4
module Cloudinary::Cache
  class << self
    # source://cloudinary//lib/cloudinary/cache.rb#9
    def fetch(public_id, options); end

    # source://cloudinary//lib/cloudinary/cache.rb#23
    def flush_all; end

    # source://cloudinary//lib/cloudinary/cache.rb#9
    def get(public_id, options); end

    # source://cloudinary//lib/cloudinary/cache.rb#17
    def set(public_id, options, value); end

    # Returns the value of attribute storage.
    #
    # source://cloudinary//lib/cloudinary/cache.rb#7
    def storage; end

    # Sets the attribute storage
    #
    # @param value the value to set the attribute storage to.
    #
    # source://cloudinary//lib/cloudinary/cache.rb#7
    def storage=(_arg0); end

    private

    # source://cloudinary//lib/cloudinary/cache.rb#29
    def generate_cache_key(public_id, options); end
  end
end

# source://cloudinary//lib/cloudinary/carrier_wave/process.rb#1
module Cloudinary::CarrierWave
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods
  mixes_in_class_methods ::Cloudinary::CarrierWave::ClassMethods

  # source://cloudinary//lib/cloudinary/carrier_wave/process.rb#124
  def all_processors; end

  # source://cloudinary//lib/cloudinary/carrier_wave/process.rb#118
  def all_versions_processors; end

  # Rename preloaded uploads if public_id was overridden
  #
  # @return [Boolean]
  #
  # source://cloudinary//lib/cloudinary/carrier_wave.rb#141
  def auto_rename_preloaded?; end

  # source://cloudinary//lib/cloudinary/carrier_wave/preloaded.rb#10
  def cache!(new_file); end

  # source://cloudinary//lib/cloudinary/carrier_wave/preloaded.rb#38
  def cache_name; end

  # source://cloudinary//lib/cloudinary/carrier_wave.rb#116
  def cache_versions!(new_file = T.unsafe(nil)); end

  # Let Cloudinary download remote URLs directly
  #
  # @return [Boolean]
  #
  # source://cloudinary//lib/cloudinary/carrier_wave.rb#136
  def cloudinary_should_handle_remote?; end

  # source://cloudinary//lib/cloudinary/carrier_wave.rb#195
  def default_format; end

  # default public_id to use if no uploaded file. Override with public_id of an uploaded image if you want a default image.
  #
  # source://cloudinary//lib/cloudinary/carrier_wave.rb#73
  def default_public_id; end

  # Should removed files be removed from Cloudinary as well. Can be overridden.
  #
  # @return [Boolean]
  #
  # source://cloudinary//lib/cloudinary/carrier_wave.rb#131
  def delete_remote?; end

  # source://cloudinary//lib/cloudinary/carrier_wave/remote.rb#2
  def download!(uri, *args); end

  # source://cloudinary//lib/cloudinary/carrier_wave/process.rb#128
  def eager; end

  # source://cloudinary//lib/cloudinary/carrier_wave.rb#67
  def filename; end

  # source://cloudinary//lib/cloudinary/carrier_wave/process.rb#153
  def format; end

  # source://cloudinary//lib/cloudinary/carrier_wave.rb#61
  def full_public_id; end

  # @return [Boolean]
  #
  # source://cloudinary//lib/cloudinary/carrier_wave.rb#19
  def is_main_uploader?; end

  # If the user overrode public_id, that should be used, even if it's different from current public_id in the database.
  # Otherwise, try to use public_id from the database.
  # Otherwise, generate a new random public_id
  #
  # source://cloudinary//lib/cloudinary/carrier_wave.rb#85
  def my_public_id; end

  # source://cloudinary//lib/cloudinary/carrier_wave.rb#120
  def process!(new_file = T.unsafe(nil)); end

  # public_id to use for uploaded file. Can be overridden by caller. Random public_id will be used otherwise.
  #
  # source://cloudinary//lib/cloudinary/carrier_wave.rb#78
  def public_id; end

  # source://cloudinary//lib/cloudinary/carrier_wave.rb#112
  def recreate_versions!; end

  # source://cloudinary//lib/cloudinary/carrier_wave.rb#91
  def rename(to_public_id = T.unsafe(nil), overwrite = T.unsafe(nil)); end

  # source://cloudinary//lib/cloudinary/carrier_wave/process.rb#138
  def requested_format; end

  # source://cloudinary//lib/cloudinary/carrier_wave.rb#203
  def resource_type; end

  # source://cloudinary//lib/cloudinary/carrier_wave/preloaded.rb#24
  def retrieve_from_cache!(new_file); end

  # source://cloudinary//lib/cloudinary/carrier_wave.rb#27
  def retrieve_from_store!(identifier); end

  # source://cloudinary//lib/cloudinary/carrier_wave.rb#125
  def sanitize(filename); end

  # @raise [CloudinaryException]
  #
  # source://cloudinary//lib/cloudinary/carrier_wave/process.rb#53
  def set_or_yell(hash, attr, value); end

  # source://cloudinary//lib/cloudinary/carrier_wave.rb#199
  def storage_type; end

  # source://cloudinary//lib/cloudinary/carrier_wave/process.rb#162
  def store!(new_file = T.unsafe(nil)); end

  # source://cloudinary//lib/cloudinary/carrier_wave.rb#23
  def stored_version; end

  # @raise [CloudinaryException]
  #
  # source://cloudinary//lib/cloudinary/carrier_wave/process.rb#132
  def tags; end

  # source://cloudinary//lib/cloudinary/carrier_wave/process.rb#58
  def transformation; end

  # source://cloudinary//lib/cloudinary/carrier_wave.rb#41
  def url(*args); end

  # Use extended identifier format that includes resource type and storage type.
  #
  # @return [Boolean]
  #
  # source://cloudinary//lib/cloudinary/carrier_wave.rb#146
  def use_extended_identifier?; end

  class << self
    # source://cloudinary//lib/cloudinary/carrier_wave/preloaded.rb#88
    def createRawOrPreloaded(file); end

    # @private
    #
    # source://cloudinary//lib/cloudinary/carrier_wave.rb#10
    def included(base); end

    # For the given methods - versions should call the main uploader method
    #
    # source://cloudinary//lib/cloudinary/carrier_wave.rb#208
    def override_in_versions(base, *methods); end
  end

  module GeneratedClassMethods
    def metadata; end
    def metadata=(value); end
    def metadata?; end
    def storage_type; end
    def storage_type=(value); end
    def storage_type?; end
  end

  module GeneratedInstanceMethods
    def metadata; end
    def metadata=(value); end
    def metadata?; end
    def storage_type=(value); end
  end
end

# source://cloudinary//lib/cloudinary/carrier_wave/process.rb#2
module Cloudinary::CarrierWave::ClassMethods
  # source://cloudinary//lib/cloudinary/carrier_wave/process.rb#44
  def cloudinary_transformation(options); end

  # source://cloudinary//lib/cloudinary/carrier_wave/process.rb#16
  def convert(format); end

  # source://cloudinary//lib/cloudinary/carrier_wave/process.rb#40
  def crop(width, height, gravity = T.unsafe(nil)); end

  # source://cloudinary//lib/cloudinary/carrier_wave/process.rb#12
  def eager; end

  # source://cloudinary//lib/cloudinary/carrier_wave/process.rb#3
  def make_private; end

  # source://cloudinary//lib/cloudinary/carrier_wave/process.rb#7
  def process_all_versions(*args); end

  # source://cloudinary//lib/cloudinary/carrier_wave/process.rb#32
  def resize_and_pad(width, height, background = T.unsafe(nil), gravity = T.unsafe(nil)); end

  # source://cloudinary//lib/cloudinary/carrier_wave/process.rb#28
  def resize_to_fill(width, height, gravity = T.unsafe(nil)); end

  # source://cloudinary//lib/cloudinary/carrier_wave/process.rb#24
  def resize_to_fit(width, height); end

  # source://cloudinary//lib/cloudinary/carrier_wave/process.rb#20
  def resize_to_limit(width, height); end

  # source://cloudinary//lib/cloudinary/carrier_wave/process.rb#36
  def scale(width, height); end

  # source://cloudinary//lib/cloudinary/carrier_wave/process.rb#48
  def tags(*tags); end
end

# source://cloudinary//lib/cloudinary/carrier_wave.rb#150
class Cloudinary::CarrierWave::CloudinaryFile
  # @return [CloudinaryFile] a new instance of CloudinaryFile
  #
  # source://cloudinary//lib/cloudinary/carrier_wave.rb#152
  def initialize(identifier, uploader); end

  # source://cloudinary//lib/cloudinary/carrier_wave.rb#178
  def delete; end

  # @return [Boolean]
  #
  # source://cloudinary//lib/cloudinary/carrier_wave.rb#183
  def exists?; end

  # Returns the value of attribute filename.
  #
  # source://cloudinary//lib/cloudinary/carrier_wave.rb#151
  def filename; end

  # Returns the value of attribute format.
  #
  # source://cloudinary//lib/cloudinary/carrier_wave.rb#151
  def format; end

  # Returns the value of attribute identifier.
  #
  # source://cloudinary//lib/cloudinary/carrier_wave.rb#151
  def identifier; end

  # Returns the value of attribute public_id.
  #
  # source://cloudinary//lib/cloudinary/carrier_wave.rb#151
  def public_id; end

  # source://cloudinary//lib/cloudinary/carrier_wave.rb#188
  def read(options = T.unsafe(nil)); end

  # Returns the value of attribute resource_type.
  #
  # source://cloudinary//lib/cloudinary/carrier_wave.rb#151
  def resource_type; end

  # source://cloudinary//lib/cloudinary/carrier_wave.rb#174
  def storage_identifier; end

  # Returns the value of attribute storage_type.
  #
  # source://cloudinary//lib/cloudinary/carrier_wave.rb#151
  def storage_type; end

  # Returns the value of attribute version.
  #
  # source://cloudinary//lib/cloudinary/carrier_wave.rb#151
  def version; end
end

# source://cloudinary//lib/cloudinary/carrier_wave/preloaded.rb#6
Cloudinary::CarrierWave::PRELOADED_CLOUDINARY_PATH = T.let(T.unsafe(nil), Regexp)

# source://cloudinary//lib/cloudinary/carrier_wave/preloaded.rb#42
class Cloudinary::CarrierWave::PreloadedCloudinaryFile < ::Cloudinary::PreloadedFile
  # @return [PreloadedCloudinaryFile] a new instance of PreloadedCloudinaryFile
  #
  # source://cloudinary//lib/cloudinary/carrier_wave/preloaded.rb#43
  def initialize(file_info); end

  # source://cloudinary//lib/cloudinary/carrier_wave/preloaded.rb#50
  def delete; end

  # source://cloudinary//lib/cloudinary/carrier_wave/preloaded.rb#54
  def original_filename; end
end

# source://cloudinary//lib/cloudinary/carrier_wave/remote.rb#15
class Cloudinary::CarrierWave::RemoteFile
  # @return [RemoteFile] a new instance of RemoteFile
  #
  # source://cloudinary//lib/cloudinary/carrier_wave/remote.rb#17
  def initialize(uri, filename); end

  # source://cloudinary//lib/cloudinary/carrier_wave/remote.rb#22
  def delete; end

  # Returns the value of attribute original_filename.
  #
  # source://cloudinary//lib/cloudinary/carrier_wave/remote.rb#16
  def original_filename; end

  # Returns the value of attribute uri.
  #
  # source://cloudinary//lib/cloudinary/carrier_wave/remote.rb#16
  def uri; end
end

# source://cloudinary//lib/cloudinary/carrier_wave.rb#124
Cloudinary::CarrierWave::SANITIZE_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://cloudinary//lib/cloudinary/carrier_wave/preloaded.rb#8
Cloudinary::CarrierWave::SHORT_STORED_CLOUDINARY_PATH = T.let(T.unsafe(nil), Regexp)

# source://cloudinary//lib/cloudinary/carrier_wave/preloaded.rb#7
Cloudinary::CarrierWave::STORED_CLOUDINARY_PATH = T.let(T.unsafe(nil), Regexp)

# source://cloudinary//lib/cloudinary/carrier_wave/storage.rb#1
class Cloudinary::CarrierWave::Storage < ::CarrierWave::Storage::Abstract
  # source://cloudinary//lib/cloudinary/carrier_wave/storage.rb#57
  def identifier; end

  # source://cloudinary//lib/cloudinary/carrier_wave/storage.rb#3
  def store!(file); end

  # Updates the model mounter identifier with version information.
  #
  # Carrierwave uses hooks when integrating with ORMs so it's important to
  # update the identifier in a way that does not trigger hooks again or else
  # you'll get stuck in a loop.
  #
  # source://cloudinary//lib/cloudinary/carrier_wave/storage.rb#66
  def store_cloudinary_identifier(version, filename, resource_type = T.unsafe(nil), type = T.unsafe(nil)); end
end

# source://cloudinary//lib/cloudinary/carrier_wave/preloaded.rb#59
class Cloudinary::CarrierWave::StoredFile < ::Cloudinary::PreloadedFile
  # @return [StoredFile] a new instance of StoredFile
  #
  # source://cloudinary//lib/cloudinary/carrier_wave/preloaded.rb#60
  def initialize(file_info); end

  # source://cloudinary//lib/cloudinary/carrier_wave/preloaded.rb#75
  def delete; end

  # source://cloudinary//lib/cloudinary/carrier_wave/preloaded.rb#79
  def original_filename; end

  # source://cloudinary//lib/cloudinary/carrier_wave/preloaded.rb#83
  def to_s; end

  # @return [Boolean]
  #
  # source://cloudinary//lib/cloudinary/carrier_wave/preloaded.rb#71
  def valid?; end
end

# source://cloudinary//lib/cloudinary/carrier_wave/error.rb#2
class Cloudinary::CarrierWave::UploadError < ::StandardError
  # @return [UploadError] a new instance of UploadError
  #
  # source://cloudinary//lib/cloudinary/carrier_wave/error.rb#4
  def initialize(message, http_code); end

  # Returns the value of attribute http_code.
  #
  # source://cloudinary//lib/cloudinary/carrier_wave/error.rb#3
  def http_code; end
end

# source://cloudinary//lib/cloudinary/cloudinary_controller.rb#1
module Cloudinary::CloudinaryController
  protected

  # @return [Boolean]
  #
  # source://cloudinary//lib/cloudinary/cloudinary_controller.rb#4
  def valid_cloudinary_response?; end
end

# source://cloudinary//lib/cloudinary/config.rb#2
module Cloudinary::Config
  include ::Cloudinary::BaseConfig

  # source://cloudinary//lib/cloudinary/config.rb#8
  def load_config_from_env; end

  private

  # source://cloudinary//lib/cloudinary/config.rb#33
  def config_from_parsed_url(parsed_url); end

  # source://cloudinary//lib/cloudinary/config.rb#25
  def env_url; end

  # source://cloudinary//lib/cloudinary/config.rb#29
  def expected_scheme; end
end

# source://cloudinary//lib/cloudinary/config.rb#5
Cloudinary::Config::ENV_URL = T.let(T.unsafe(nil), String)

# source://cloudinary//lib/cloudinary/config.rb#6
Cloudinary::Config::SCHEME = T.let(T.unsafe(nil), String)

# source://cloudinary//lib/cloudinary/downloader.rb#2
class Cloudinary::Downloader
  class << self
    # source://cloudinary//lib/cloudinary/downloader.rb#4
    def download(source, options = T.unsafe(nil)); end
  end
end

# source://cloudinary//lib/cloudinary/engine.rb#1
class Cloudinary::Engine < ::Rails::Engine
  class << self
    private

    # source://activesupport/8.0.2/lib/active_support/class_attribute.rb#15
    def __class_attr___callbacks; end

    # source://activesupport/8.0.2/lib/active_support/class_attribute.rb#17
    def __class_attr___callbacks=(new_value); end
  end
end

# source://cloudinary//lib/cloudinary.rb#53
Cloudinary::FORMAT_ALIASES = T.let(T.unsafe(nil), Hash)

# source://cloudinary//lib/cloudinary/helper.rb#350
module Cloudinary::FormBuilder
  # source://cloudinary//lib/cloudinary/helper.rb#351
  def cl_image_upload(method, options = T.unsafe(nil)); end

  # source://cloudinary//lib/cloudinary/helper.rb#355
  def cl_unsigned_image_upload(method, upload_preset, options = T.unsafe(nil)); end

  # source://cloudinary//lib/cloudinary/helper.rb#355
  def cl_unsigned_upload(method, upload_preset, options = T.unsafe(nil)); end

  # source://cloudinary//lib/cloudinary/helper.rb#351
  def cl_upload(method, options = T.unsafe(nil)); end
end

# source://cloudinary//lib/cloudinary/preloaded_file.rb#1
class Cloudinary::PreloadedFile
  # @return [PreloadedFile] a new instance of PreloadedFile
  #
  # source://cloudinary//lib/cloudinary/preloaded_file.rb#5
  def initialize(file_info); end

  # Returns the value of attribute filename.
  #
  # source://cloudinary//lib/cloudinary/preloaded_file.rb#4
  def filename; end

  # Returns the value of attribute format.
  #
  # source://cloudinary//lib/cloudinary/preloaded_file.rb#4
  def format; end

  # source://cloudinary//lib/cloudinary/preloaded_file.rb#16
  def identifier; end

  # Returns the value of attribute public_id.
  #
  # source://cloudinary//lib/cloudinary/preloaded_file.rb#4
  def public_id; end

  # Returns the value of attribute resource_type.
  #
  # source://cloudinary//lib/cloudinary/preloaded_file.rb#4
  def resource_type; end

  # Returns the value of attribute signature.
  #
  # source://cloudinary//lib/cloudinary/preloaded_file.rb#4
  def signature; end

  # source://cloudinary//lib/cloudinary/preloaded_file.rb#20
  def to_s; end

  # Returns the value of attribute type.
  #
  # source://cloudinary//lib/cloudinary/preloaded_file.rb#4
  def type; end

  # @return [Boolean]
  #
  # source://cloudinary//lib/cloudinary/preloaded_file.rb#10
  def valid?; end

  # Returns the value of attribute version.
  #
  # source://cloudinary//lib/cloudinary/preloaded_file.rb#4
  def version; end

  class << self
    # source://cloudinary//lib/cloudinary/preloaded_file.rb#24
    def split_format(identifier); end
  end
end

# source://cloudinary//lib/cloudinary/preloaded_file.rb#2
Cloudinary::PreloadedFile::PRELOADED_CLOUDINARY_PATH = T.let(T.unsafe(nil), Regexp)

# source://cloudinary//lib/cloudinary/railtie.rb#1
class Cloudinary::Railtie < ::Rails::Railtie; end

# source://cloudinary//lib/cloudinary.rb#30
Cloudinary::SHARED_CDN = T.let(T.unsafe(nil), String)

# source://cloudinary//lib/cloudinary/search.rb#1
class Cloudinary::Search
  # @return [Search] a new instance of Search
  #
  # source://cloudinary//lib/cloudinary/search.rb#12
  def initialize; end

  # The name of a field (attribute) for which an aggregation count should be calculated and returned in the response.
  #
  # You can specify more than one aggregate parameter.
  #
  # @param value [String] Supported values: resource_type, type, pixels (only the image assets in the response are
  #   aggregated), duration (only the video assets in the response are aggregated), format, and
  #   bytes. For aggregation fields without discrete values, the results are divided into
  #   categories.
  # @return [Cloudinary::Search]
  #
  # source://cloudinary//lib/cloudinary/search.rb#67
  def aggregate(value); end

  # Sets the API endpoint.
  #
  # @param endpoint [String] the endpoint to set.
  # @return [Cloudinary::Search]
  #
  # source://cloudinary//lib/cloudinary/search.rb#154
  def endpoint(endpoint); end

  # source://cloudinary//lib/cloudinary/search.rb#116
  def execute(options = T.unsafe(nil)); end

  # source://cloudinary//lib/cloudinary/search.rb#31
  def expression(value); end

  # The list of the asset attributes to include for each asset in the response.
  #
  # @param value [Array] The array of attributes' names.
  # @return [Cloudinary::Search]
  #
  # source://cloudinary//lib/cloudinary/search.rb#88
  def fields(value); end

  # source://cloudinary//lib/cloudinary/search.rb#36
  def max_results(value); end

  # source://cloudinary//lib/cloudinary/search.rb#41
  def next_cursor(value); end

  # Sets the `sort_by` field.
  #
  # @param field_name [String] The field to sort by. You can specify more than one sort_by parameter;
  #   results will be sorted according to the order of the fields provided.
  # @param dir [String] Sort direction. Valid sort directions are 'asc' or 'desc'. Default: 'desc'.
  # @return [Cloudinary::Search]
  #
  # source://cloudinary//lib/cloudinary/search.rb#53
  def sort_by(field_name, dir = T.unsafe(nil)); end

  # Returns the query as an hash.
  #
  # @return [Hash]
  #
  # source://cloudinary//lib/cloudinary/search.rb#108
  def to_h; end

  # Creates a signed Search URL that can be used on the client side.
  #
  # @param ttl [Integer] The time to live in seconds.
  # @param next_cursor [String] Starting position.
  # @param options [Hash] Additional url delivery options.
  # @return [String] The resulting Search URL
  #
  # source://cloudinary//lib/cloudinary/search.rb#129
  def to_url(ttl = T.unsafe(nil), next_cursor = T.unsafe(nil), options = T.unsafe(nil)); end

  # Sets the time to live of the search URL.
  #
  # @param ttl [Object] The time to live in seconds.
  # @return [Cloudinary::Search]
  #
  # source://cloudinary//lib/cloudinary/search.rb#100
  def ttl(ttl); end

  # The name of an additional asset attribute to include for each asset in the response.
  #
  # @param value [String] Possible value: context, tags, and for Tier 2 also image_metadata, and image_analysis.
  # @return [Cloudinary::Search]
  #
  # source://cloudinary//lib/cloudinary/search.rb#77
  def with_field(value); end

  class << self
    # implicitly generate an instance delegate the method
    #
    # source://cloudinary//lib/cloudinary/search.rb#26
    def method_missing(method_name, *arguments); end
  end
end

# source://cloudinary//lib/cloudinary/search.rb#5
Cloudinary::Search::AGGREGATE = T.let(T.unsafe(nil), Symbol)

# source://cloudinary//lib/cloudinary/search.rb#2
Cloudinary::Search::ENDPOINT = T.let(T.unsafe(nil), String)

# source://cloudinary//lib/cloudinary/search.rb#7
Cloudinary::Search::FIELDS = T.let(T.unsafe(nil), Symbol)

# source://cloudinary//lib/cloudinary/search.rb#8
Cloudinary::Search::KEYS_WITH_UNIQUE_VALUES = T.let(T.unsafe(nil), Array)

# source://cloudinary//lib/cloudinary/search.rb#4
Cloudinary::Search::SORT_BY = T.let(T.unsafe(nil), Symbol)

# Used for search URLs
#
# source://cloudinary//lib/cloudinary/search.rb#10
Cloudinary::Search::TTL = T.let(T.unsafe(nil), Integer)

# source://cloudinary//lib/cloudinary/search.rb#6
Cloudinary::Search::WITH_FIELD = T.let(T.unsafe(nil), Symbol)

# The Cloudinary API folders search method allows you fine control on filtering and retrieving information on all the
# folders in your cloud with the help of query expressions in a Lucene-like query language.
#
# source://cloudinary//lib/cloudinary/search_folders.rb#3
class Cloudinary::SearchFolders < ::Cloudinary::Search; end

# source://cloudinary//lib/cloudinary/search_folders.rb#4
Cloudinary::SearchFolders::ENDPOINT = T.let(T.unsafe(nil), String)

# source://cloudinary//lib/cloudinary/static.rb#4
class Cloudinary::Static
  class << self
    # ## Cloudinary::Utils support ###
    #
    # source://cloudinary//lib/cloudinary/static.rb#79
    def public_id_and_resource_type_from_path(path); end

    # source://cloudinary//lib/cloudinary/static.rb#12
    def sync(options = T.unsafe(nil)); end

    private

    # source://cloudinary//lib/cloudinary/static.rb#217
    def absolutize(dirs); end

    # source://cloudinary//lib/cloudinary/static.rb#103
    def build_metadata(metadata_file = T.unsafe(nil), hash = T.unsafe(nil)); end

    # source://cloudinary//lib/cloudinary/static.rb#131
    def discover(dirs, matcher); end

    # source://cloudinary//lib/cloudinary/static.rb#123
    def discover_all(&block); end

    # source://cloudinary//lib/cloudinary/static.rb#207
    def extension_mask_to_regex(extension_mask); end

    # source://cloudinary//lib/cloudinary/static.rb#161
    def extension_matcher_for(group); end

    # @return [Boolean]
    #
    # source://cloudinary//lib/cloudinary/static.rb#152
    def ignore_file?(file); end

    # @return [Boolean]
    #
    # source://cloudinary//lib/cloudinary/static.rb#195
    def image?(path); end

    # Test for matching either strings or regexps
    #
    # @return [Boolean]
    #
    # source://cloudinary//lib/cloudinary/static.rb#157
    def matches?(target, patterns); end

    # source://cloudinary//lib/cloudinary/static.rb#95
    def metadata_file_path; end

    # source://cloudinary//lib/cloudinary/static.rb#99
    def metadata_trash_file_path; end

    # source://cloudinary//lib/cloudinary/static.rb#229
    def print(s); end

    # source://cloudinary//lib/cloudinary/static.rb#211
    def public_prefixes; end

    # source://cloudinary//lib/cloudinary/static.rb#191
    def reset_static_file_config!; end

    # source://cloudinary//lib/cloudinary/static.rb#199
    def resource_type(path); end

    # source://cloudinary//lib/cloudinary/static.rb#91
    def root; end

    # source://cloudinary//lib/cloudinary/static.rb#170
    def static_file_config; end
  end
end

# source://cloudinary//lib/cloudinary/static.rb#6
Cloudinary::Static::DEFAULT_IMAGE_DIRS = T.let(T.unsafe(nil), Array)

# source://cloudinary//lib/cloudinary/static.rb#7
Cloudinary::Static::DEFAULT_IMAGE_EXTENSION_MASK = T.let(T.unsafe(nil), String)

# source://cloudinary//lib/cloudinary/static.rb#5
Cloudinary::Static::IGNORE_FILES = T.let(T.unsafe(nil), Array)

# source://cloudinary//lib/cloudinary/static.rb#8
Cloudinary::Static::METADATA_FILE = T.let(T.unsafe(nil), String)

# source://cloudinary//lib/cloudinary/static.rb#9
Cloudinary::Static::METADATA_TRASH_FILE = T.let(T.unsafe(nil), String)

# source://cloudinary//lib/cloudinary.rb#32
Cloudinary::USER_AGENT = T.let(T.unsafe(nil), String)

# source://cloudinary//lib/cloudinary/uploader.rb#6
class Cloudinary::Uploader
  class << self
    # source://cloudinary//lib/cloudinary/uploader.rb#322
    def add_context(context, public_ids = T.unsafe(nil), options = T.unsafe(nil)); end

    # options may include 'exclusive' (boolean) which causes clearing this tag from all other resources
    #
    # source://cloudinary//lib/cloudinary/uploader.rb#266
    def add_tag(tag, public_ids = T.unsafe(nil), options = T.unsafe(nil)); end

    # source://cloudinary//lib/cloudinary/uploader.rb#406
    def build_custom_headers(headers); end

    # source://cloudinary//lib/cloudinary/uploader.rb#8
    def build_upload_params(options, as_bool = T.unsafe(nil)); end

    # source://cloudinary//lib/cloudinary/uploader.rb#410
    def cache_results(result); end

    # @raise [CloudinaryException]
    #
    # source://cloudinary//lib/cloudinary/uploader.rb#344
    def call_api(action, options); end

    # source://cloudinary//lib/cloudinary/uploader.rb#332
    def call_context_api(context, command, public_ids = T.unsafe(nil), options = T.unsafe(nil)); end

    # source://cloudinary//lib/cloudinary/uploader.rb#310
    def call_tags_api(tag, command, public_ids = T.unsafe(nil), options = T.unsafe(nil)); end

    # Creates a new archive in the server and returns information in JSON format
    #
    # source://cloudinary//lib/cloudinary/uploader.rb#170
    def create_archive(options = T.unsafe(nil), target_format = T.unsafe(nil)); end

    # Creates auto-generated video slideshow.
    #
    # @param options [Hash] Additional options.
    # @return [Hash] Hash with meta information URLs of generated slideshow resources.
    #
    # source://cloudinary//lib/cloudinary/uploader.rb#200
    def create_slideshow(options = T.unsafe(nil)); end

    # Creates a new zip archive in the server and returns information in JSON format
    #
    # source://cloudinary//lib/cloudinary/uploader.rb#179
    def create_zip(options = T.unsafe(nil)); end

    # source://cloudinary//lib/cloudinary/uploader.rb#123
    def destroy(public_id, options = T.unsafe(nil)); end

    # @return [Boolean]
    #
    # source://cloudinary//lib/cloudinary/uploader.rb#150
    def exists?(public_id, options = T.unsafe(nil)); end

    # source://cloudinary//lib/cloudinary/uploader.rb#161
    def explicit(public_id, options = T.unsafe(nil)); end

    # source://cloudinary//lib/cloudinary/uploader.rb#252
    def explode(public_id, options = T.unsafe(nil)); end

    # Generates sprites by merging multiple images into a single large image.
    #
    # @param tag [String|Hash] Treated as additional options when hash is passed, otherwise as a tag
    # @param options [Hash] Additional options. Should be omitted when +tag_or_options+ is a Hash
    # @return [Hash] Hash with meta information URLs of generated sprite resources
    #
    # source://cloudinary//lib/cloudinary/uploader.rb#224
    def generate_sprite(tag, options = T.unsafe(nil)); end

    # Creates either a single animated image, video or a PDF.
    #
    # @param tag [String|Hash] Treated as additional options when hash is passed, otherwise as a tag
    # @param options [Hash] Additional options. Should be omitted when +tag_or_options+ is a Hash
    # @return [Hash] Hash with meta information URLs of the generated file
    #
    # source://cloudinary//lib/cloudinary/uploader.rb#246
    def multi(tag, options = T.unsafe(nil)); end

    # source://cloudinary//lib/cloudinary/uploader.rb#326
    def remove_all_context(public_ids = T.unsafe(nil), options = T.unsafe(nil)); end

    # source://cloudinary//lib/cloudinary/uploader.rb#280
    def remove_all_tags(public_ids = T.unsafe(nil), options = T.unsafe(nil)); end

    # source://cloudinary//lib/cloudinary/uploader.rb#272
    def remove_tag(tag, public_ids = T.unsafe(nil), options = T.unsafe(nil)); end

    # source://cloudinary//lib/cloudinary/uploader.rb#134
    def rename(from_public_id, to_public_id, options = T.unsafe(nil)); end

    # source://cloudinary//lib/cloudinary/uploader.rb#276
    def replace_tag(tag, public_ids = T.unsafe(nil), options = T.unsafe(nil)); end

    # source://cloudinary//lib/cloudinary/uploader.rb#185
    def text(text, options = T.unsafe(nil)); end

    # source://cloudinary//lib/cloudinary/uploader.rb#54
    def unsigned_upload(file, upload_preset, options = T.unsafe(nil)); end

    # Populates metadata fields with the given values. Existing values will be overwritten.
    #
    # Any metadata-value pairs given are merged with any existing metadata-value pairs
    # (an empty value for an existing metadata field clears the value).
    #
    # @option options
    # @option options
    # @param metadata [Hash] A list of custom metadata fields (by external_id) and the values to assign to each of them.
    # @param public_ids [Array] An array of Public IDs of assets uploaded to Cloudinary.
    # @param options [Hash]
    # @raise [Cloudinary::Api:Error]
    # @return mixed a list of public IDs that were updated
    #
    # source://cloudinary//lib/cloudinary/uploader.rb#296
    def update_metadata(metadata, public_ids, options = T.unsafe(nil)); end

    # source://cloudinary//lib/cloudinary/uploader.rb#58
    def upload(file, options = T.unsafe(nil)); end

    # Upload large files. Note that public_id should include an extension for best results.
    #
    # source://cloudinary//lib/cloudinary/uploader.rb#67
    def upload_large(file, public_id_or_options = T.unsafe(nil), old_options = T.unsafe(nil)); end

    # Upload large  files. Note that public_id should include an extension for best results.
    #
    # source://cloudinary//lib/cloudinary/uploader.rb#114
    def upload_large_part(file, options = T.unsafe(nil)); end
  end
end

# source://cloudinary//lib/cloudinary/uploader.rb#193
Cloudinary::Uploader::SLIDESHOW_PARAMS = T.let(T.unsafe(nil), Array)

# source://cloudinary//lib/cloudinary/uploader.rb#183
Cloudinary::Uploader::TEXT_PARAMS = T.let(T.unsafe(nil), Array)

# source://cloudinary//lib/cloudinary/utils.rb#14
class Cloudinary::Utils
  class << self
    # source://cloudinary//lib/cloudinary/utils.rb#476
    def api_sign_request(params_to_sign, api_secret, signature_algorithm = T.unsafe(nil)); end

    # source://cloudinary//lib/cloudinary/utils.rb#472
    def api_string_to_sign(params_to_sign); end

    # Returns a Hash of parameters used to create an archive
    #
    # @param options [Hash]
    # @private
    #
    # source://cloudinary//lib/cloudinary/utils.rb#1046
    def archive_params(options = T.unsafe(nil)); end

    # source://cloudinary//lib/cloudinary/utils.rb#980
    def as_bool(value); end

    # source://cloudinary//lib/cloudinary/utils.rb#993
    def as_safe_bool(value); end

    # source://cloudinary//lib/cloudinary/utils.rb#854
    def asset_file_name(path); end

    # Creates a base URL for the cloudinary api
    #
    # @param path [Object] Resource name
    # @param options [Hash] Additional options
    # @return [String]
    #
    # source://cloudinary//lib/cloudinary/utils.rb#731
    def base_api_url(path, options = T.unsafe(nil)); end

    # source://cloudinary//lib/cloudinary/utils.rb#900
    def build_array(array); end

    # source://cloudinary//lib/cloudinary/utils.rb#711
    def build_distribution_domain(options = T.unsafe(nil)); end

    # @param eager [String|Hash|Array] an transformation as a string or hash, with or without a format. The parameter also accepts an array of eager transformations.
    # @private
    #
    # source://cloudinary//lib/cloudinary/utils.rb#1075
    def build_eager(eager); end

    # Build params for multi, download_multi, generate_sprite, and download_generated_sprite methods
    #
    # @param tag_or_options [String|Hash] Treated as additional options when hash is passed, otherwise as a tag
    # @param options [Hash] Additional options. Should be omitted when +tag_or_options+ is a Hash
    # @private
    # @return [Hash]
    #
    # source://cloudinary//lib/cloudinary/utils.rb#1251
    def build_multi_and_sprite_params(tag_or_options, options); end

    # source://cloudinary//lib/cloudinary/utils.rb#179
    def chain_transformation(options, *transformation); end

    # source://cloudinary//lib/cloudinary/utils.rb#739
    def cloudinary_api_url(action = T.unsafe(nil), options = T.unsafe(nil)); end

    # Warning: options are being destructively updated!
    #
    # source://cloudinary//lib/cloudinary/utils.rb#514
    def cloudinary_url(source, options = T.unsafe(nil)); end

    # source://cloudinary//lib/cloudinary/utils.rb#968
    def config_option_consume(options, option_name, default_value = T.unsafe(nil)); end

    # source://cloudinary//lib/cloudinary/utils.rb#974
    def config_option_fetch(options, option_name, default_value = T.unsafe(nil)); end

    # source://cloudinary//lib/cloudinary/utils.rb#1027
    def deep_symbolize_keys(object); end

    # Returns a URL that when invokes creates an archive and returns it.
    #
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @param options [Hash]
    # @return [String] archive url
    #
    # source://cloudinary//lib/cloudinary/utils.rb#831
    def download_archive_url(options = T.unsafe(nil)); end

    # The returned url should allow downloading the backedup asset based on the version and asset id
    #
    # asset and version id are returned with resource(<PUBLIC_ID1>, { versions: true })
    #
    # @param asset_id [String] Asset identifier
    # @param version_id [String] Specific version of asset to download
    # @param options [Hash] Additional options
    # @return [String] An url for downloading a file
    #
    # source://cloudinary//lib/cloudinary/utils.rb#1312
    def download_backedup_asset(asset_id, version_id, options = T.unsafe(nil)); end

    # Creates and returns a URL that when invoked creates an archive of a folder.
    #
    # @param folder_path [Object] Full path (from the root) of the folder to download.
    # @param options [Hash] Additional options.
    # @return [String]
    #
    # source://cloudinary//lib/cloudinary/utils.rb#848
    def download_folder(folder_path, options = T.unsafe(nil)); end

    # Return a signed URL to the 'generate_sprite' endpoint with 'mode=download'.
    #
    # @param tag [String|Hash] Treated as additional options when hash is passed, otherwise as a tag
    # @param options [Hash] Additional options. Should be omitted when +tag_or_options+ is a Hash
    # @return [String] The signed URL to download sprite
    #
    # source://cloudinary//lib/cloudinary/utils.rb#776
    def download_generated_sprite(tag, options = T.unsafe(nil)); end

    # Return a signed URL to the 'multi' endpoint with 'mode=download'.
    #
    # @param tag [String|Hash] Treated as additional options when hash is passed, otherwise as a tag
    # @param options [Hash] Additional options. Should be omitted when +tag_or_options+ is a Hash
    # @return [String] The signed URL to download multi
    #
    # source://cloudinary//lib/cloudinary/utils.rb#787
    def download_multi(tag, options = T.unsafe(nil)); end

    # Returns a URL that when invokes creates an zip archive and returns it.
    #
    # @see download_archive_url
    #
    # source://cloudinary//lib/cloudinary/utils.rb#838
    def download_zip_url(options = T.unsafe(nil)); end

    # Same like encode_hash, with additional escaping of | and = characters
    #
    # @private
    # @return [String] a joined string of all keys and values properly escaped and separated by a pipe character
    #
    # source://cloudinary//lib/cloudinary/utils.rb#924
    def encode_context(hash); end

    # source://cloudinary//lib/cloudinary/utils.rb#932
    def encode_double_array(array); end

    # encodes a hash into pipe-delimited key-value pairs string
    #
    # @private
    # @return [String] a joined string of all keys and values separated by a pipe character
    #
    # source://cloudinary//lib/cloudinary/utils.rb#912
    def encode_hash(hash); end

    # source://cloudinary//lib/cloudinary/utils.rb#171
    def extract_config_params(options); end

    # source://cloudinary//lib/cloudinary/utils.rb#175
    def extract_transformation_params(options); end

    # source://cloudinary//lib/cloudinary/utils.rb#629
    def finalize_resource_type(resource_type, type, url_suffix, use_root_path, shorten); end

    # source://cloudinary//lib/cloudinary/utils.rb#609
    def finalize_source(source, format, url_suffix); end

    # source://cloudinary//lib/cloudinary/utils.rb#1121
    def flat_hash_to_query_params(hash); end

    # source://cloudinary//lib/cloudinary/utils.rb#1090
    def generate_auth_token(options); end

    # source://cloudinary//lib/cloudinary/utils.rb#495
    def generate_responsive_breakpoints_string(breakpoints); end

    # Warning: options are being destructively updated!
    #
    # source://cloudinary//lib/cloudinary/utils.rb#188
    def generate_transformation_string(options = T.unsafe(nil), allow_implicit_crop_mode = T.unsafe(nil)); end

    # Handles file parameter.
    #
    # @param file [Pathname, StringIO, File, String, int, _ToPath]
    # @private
    # @return [StringIO, File, String] A File object.
    #
    # source://cloudinary//lib/cloudinary/utils.rb#1284
    def handle_file_param(file, options = T.unsafe(nil)); end

    # Computes hash from input string using specified algorithm.
    #
    # @param input [String] String which to compute hash from
    # @param signature_algorithm [Symbol|nil] Algorithm to use for computing hash
    # @param hash_method [Symbol] Hash method applied to a signature algorithm (:digest or :hexdigest)
    # @return [String] Computed hash value
    #
    # source://cloudinary//lib/cloudinary/utils.rb#1386
    def hash(input, signature_algorithm = T.unsafe(nil), hash_method = T.unsafe(nil)); end

    # source://cloudinary//lib/cloudinary/utils.rb#1113
    def hash_query_params(hash); end

    # @return [Boolean]
    #
    # source://cloudinary//lib/cloudinary/utils.rb#1239
    def is_remote?(url); end

    # Returns a JSON array as String.
    # Yields the array before it is converted to JSON format
    #
    # @api private
    # @param data [Hash|String|Array<Hash>]
    # @return [String|nil] a JSON array string or `nil` if data is `nil`
    #
    # source://cloudinary//lib/cloudinary/utils.rb#486
    def json_array_param(data); end

    # source://cloudinary//lib/cloudinary/utils.rb#884
    def json_decode(str); end

    # source://cloudinary//lib/cloudinary/utils.rb#339
    def normalize_expression(expression); end

    # Handle the format parameter for fetch urls
    #
    # @param options url and transformation options. This argument may be changed by the function!
    # @private
    #
    # source://cloudinary//lib/cloudinary/utils.rb#1231
    def patch_fetch_format(options = T.unsafe(nil)); end

    # source://cloudinary//lib/cloudinary/utils.rb#792
    def private_download_url(public_id, format, options = T.unsafe(nil)); end

    # source://cloudinary//lib/cloudinary/utils.rb#1216
    def process_custom_function(param); end

    # source://cloudinary//lib/cloudinary/utils.rb#1211
    def process_custom_pre_function(param); end

    # Parse "if" parameter
    # Translates the condition if provided.
    #
    # @private
    # @return [string] "if_" + ifValue
    #
    # source://cloudinary//lib/cloudinary/utils.rb#332
    def process_if(if_value); end

    # source://cloudinary//lib/cloudinary/utils.rb#874
    def random_public_id; end

    # source://cloudinary//lib/cloudinary/utils.rb#957
    def resource_type_for_format(format); end

    # @return [Boolean]
    #
    # source://cloudinary//lib/cloudinary/utils.rb#1001
    def safe_blank?(value); end

    # source://cloudinary//lib/cloudinary/utils.rb#745
    def sign_request(params, options = T.unsafe(nil)); end

    # source://cloudinary//lib/cloudinary/utils.rb#879
    def signed_preloaded_image(result); end

    # Based on CGI::escape. In addition does not escape / :
    #
    # source://cloudinary//lib/cloudinary/utils.rb#863
    def smart_escape(string, unsafe = T.unsafe(nil)); end

    # Based on CGI::unescape. In addition keeps '+' character as is
    #
    # source://cloudinary//lib/cloudinary/utils.rb#870
    def smart_unescape(string); end

    # @return [Boolean]
    #
    # source://cloudinary//lib/cloudinary/utils.rb#951
    def supported_format?(format, formats); end

    # @return [Boolean]
    #
    # source://cloudinary//lib/cloudinary/utils.rb#947
    def supported_image_format?(format); end

    # source://cloudinary//lib/cloudinary/utils.rb#1005
    def symbolize_keys(h); end

    # source://cloudinary//lib/cloudinary/utils.rb#1016
    def symbolize_keys!(h); end

    # source://cloudinary//lib/cloudinary/utils.rb#445
    def text_style(layer); end

    # Format date in a format accepted by the usage API (e.g., 31-12-2020) if
    # passed value is of type Date, otherwise return the string representation of
    # the input.
    #
    # @param date [Date|Object]
    # @return [String]
    #
    # source://cloudinary//lib/cloudinary/utils.rb#1328
    def to_usage_api_date_format(date); end

    # Creates the URL prefix for the cloudinary resource URL
    #
    # cdn_subdomain and secure_cdn_subdomain
    # 1. Customers in shared distribution (e.g. res.cloudinary.com)
    #
    #    if cdn_domain is true uses res-[1-5 ].cloudinary.com for both http and https. Setting secure_cdn_subdomain to false disables this for https.
    # 2. Customers with private cdn
    #
    #    if cdn_domain is true uses cloudname-res-[1-5 ].cloudinary.com for http
    #
    #    if secure_cdn_domain is true uses cloudname-res-[1-5 ].cloudinary.com for https (please contact support if you require this)
    # 3. Customers with cname
    #
    #    if cdn_domain is true uses a\[1-5\]\.cname for http. For https, uses the same naming scheme as 1 for shared distribution and as 2 for private distribution.
    #
    # @private
    #
    # source://cloudinary//lib/cloudinary/utils.rb#682
    def unsigned_download_url_prefix(source, cloud_name, private_cdn, cdn_subdomain, secure_cdn_subdomain, cname, secure, secure_distribution); end

    # Verifies the authenticity of an API response signature.
    #
    # @option options
    # @param public_id [String] he public id of the asset as returned in the API response
    # @param version [Fixnum] The version of the asset as returned in the API response
    # @param signature [String] Actual signature. Can be retrieved from the X-Cld-Signature header
    # @param signature_algorithm [Symbol|nil] Algorithm to use for computing hash
    # @param options [Hash]
    # @return [Boolean]
    #
    # source://cloudinary//lib/cloudinary/utils.rb#1346
    def verify_api_response_signature(public_id, version, signature, signature_algorithm = T.unsafe(nil), options = T.unsafe(nil)); end

    # Verifies the authenticity of a notification signature.
    #
    # @option options
    # @param body [String] JSON of the request's body
    # @param timestamp [Fixnum] Unix timestamp. Can be retrieved from the X-Cld-Timestamp header
    # @param signature [String] Actual signature. Can be retrieved from the X-Cld-Signature header
    # @param valid_for [Fixnum] The desired time in seconds for considering the request valid
    # @param signature_algorithm [Symbol|nil] Algorithm to use for computing hash
    # @param options [Hash]
    # @return [Boolean]
    #
    # source://cloudinary//lib/cloudinary/utils.rb#1368
    def verify_notification_signature(body, timestamp, signature, valid_for = T.unsafe(nil), signature_algorithm = T.unsafe(nil), options = T.unsafe(nil)); end

    private

    # Helper method for generating download URLs
    #
    # @param action [String] @see Cloudinary::Utils.cloudinary_api_url
    # @param params [Hash] Query parameters in generated URL
    # @param options [Hash] Additional options
    # @return [String]
    # @yield [query_parameters] Invokes the block with query parameters to override how to encode them
    #
    # source://cloudinary//lib/cloudinary/utils.rb#763
    def cloudinary_api_download_url(action, params, options = T.unsafe(nil)); end

    # Repeatedly unescapes the source until no more unescaping is possible or 10 cycles elapsed
    #
    # @param source [String] - a (possibly) escaped string
    # @private
    # @return [String] the fully unescaped string
    #
    # source://cloudinary//lib/cloudinary/utils.rb#1103
    def fully_unescape(source); end

    # Normalize an offset value
    #
    # @param value [String] a decimal value which may have a 'p' or '%' postfix. E.g. '35%', '0.4p'
    # @private
    # @return [Object|String] a normalized String of the input value if possible otherwise the value itself
    #
    # source://cloudinary//lib/cloudinary/utils.rb#1165
    def norm_range_value(value); end

    # source://cloudinary//lib/cloudinary/utils.rb#1131
    def number_pattern; end

    # source://cloudinary//lib/cloudinary/utils.rb#1136
    def offset_any_pattern; end

    # source://cloudinary//lib/cloudinary/utils.rb#1141
    def offset_any_pattern_re; end

    # Parse layer options
    #
    # @private
    # @return [string] layer transformation string
    #
    # source://cloudinary//lib/cloudinary/utils.rb#352
    def process_layer(layer); end

    # Parse radius options
    #
    # @private
    # @return [string] radius transformation string
    #
    # source://cloudinary//lib/cloudinary/utils.rb#429
    def process_radius(radius); end

    # A video codec parameter can be either a String or a Hash.
    #
    # @param param [Object] <code>vc_<codec>[ : <profile> : [<level> : [<b_frames>]]]</code>
    #   or <code>{ codec: 'h264', profile: 'basic', level: '3.1' }</code>
    #   or <code>{ codec: 'h265', profile: 'auto', level: 'auto', b_frames: false }</code>
    # @private
    # @return [String] <code><codec> : <profile> : [<level> : [<b_frames>]]]</code> if a Hash was provided
    #   or the param if a String was provided.
    #   Returns NIL if param is not a Hash or String
    #
    # source://cloudinary//lib/cloudinary/utils.rb#1186
    def process_video_params(param); end

    # Split a range into the start and end values
    #
    # source://cloudinary//lib/cloudinary/utils.rb#1147
    def split_range(range); end
  end
end

# source://cloudinary//lib/cloudinary/utils.rb#166
Cloudinary::Utils::ALGORITHM_SIGNATURE = T.let(T.unsafe(nil), Hash)

# source://cloudinary//lib/cloudinary/utils.rb#163
Cloudinary::Utils::ALGO_SHA1 = T.let(T.unsafe(nil), Symbol)

# source://cloudinary//lib/cloudinary/utils.rb#164
Cloudinary::Utils::ALGO_SHA256 = T.let(T.unsafe(nil), Symbol)

# source://cloudinary//lib/cloudinary/utils.rb#943
Cloudinary::Utils::AUDIO_FORMATS = T.let(T.unsafe(nil), Array)

# source://cloudinary//lib/cloudinary/utils.rb#17
Cloudinary::Utils::CONDITIONAL_OPERATORS = T.let(T.unsafe(nil), Hash)

# source://cloudinary//lib/cloudinary/utils.rb#16
Cloudinary::Utils::DEFAULT_RESPONSIVE_WIDTH_TRANSFORMATION = T.let(T.unsafe(nil), Hash)

# source://cloudinary//lib/cloudinary/utils.rb#336
Cloudinary::Utils::EXP_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://cloudinary//lib/cloudinary/utils.rb#337
Cloudinary::Utils::EXP_REPLACEMENT = T.let(T.unsafe(nil), Hash)

# source://cloudinary//lib/cloudinary/utils.rb#941
Cloudinary::Utils::IMAGE_FORMATS = T.let(T.unsafe(nil), Array)

# source://cloudinary//lib/cloudinary/utils.rb#437
Cloudinary::Utils::LAYER_KEYWORD_PARAMS = T.let(T.unsafe(nil), Array)

# source://cloudinary//lib/cloudinary/utils.rb#158
Cloudinary::Utils::LONG_URL_SIGNATURE_LENGTH = T.let(T.unsafe(nil), Integer)

# source://cloudinary//lib/cloudinary/utils.rb#15
Cloudinary::Utils::MODE_DOWNLOAD = T.let(T.unsafe(nil), String)

# source://cloudinary//lib/cloudinary/utils.rb#33
Cloudinary::Utils::PREDEFINED_VARS = T.let(T.unsafe(nil), Hash)

# source://cloudinary//lib/cloudinary/utils.rb#156
Cloudinary::Utils::REMOTE_URL_REGEX = T.let(T.unsafe(nil), Regexp)

# source://cloudinary//lib/cloudinary/utils.rb#159
Cloudinary::Utils::SHORT_URL_SIGNATURE_LENGTH = T.let(T.unsafe(nil), Integer)

# source://cloudinary//lib/cloudinary/utils.rb#65
Cloudinary::Utils::SIMPLE_TRANSFORMATION_PARAMS = T.let(T.unsafe(nil), Hash)

# source://cloudinary//lib/cloudinary/utils.rb#107
Cloudinary::Utils::TRANSFORMATION_PARAMS = T.let(T.unsafe(nil), Array)

# source://cloudinary//lib/cloudinary/utils.rb#161
Cloudinary::Utils::UPLOAD_PREFIX = T.let(T.unsafe(nil), String)

# source://cloudinary//lib/cloudinary/utils.rb#86
Cloudinary::Utils::URL_KEYS = T.let(T.unsafe(nil), Array)

# source://cloudinary//lib/cloudinary/utils.rb#945
Cloudinary::Utils::VIDEO_FORMATS = T.let(T.unsafe(nil), Array)

# source://cloudinary//lib/cloudinary/version.rb#3
Cloudinary::VERSION = T.let(T.unsafe(nil), String)

# source://cloudinary//lib/cloudinary/exceptions.rb#1
class CloudinaryException < ::StandardError; end

# source://cloudinary//lib/cloudinary/video_helper.rb#1
module CloudinaryHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::Responsive
  include ::ActionView::Helpers::AssetTagHelper

  # source://cloudinary//lib/cloudinary/helper.rb#110
  def cl_blank; end

  # source://cloudinary//lib/cloudinary/helper.rb#232
  def cl_client_hints_meta_tag; end

  # @see {Cloudinary::Utils.download_archive_url}
  #
  # source://cloudinary//lib/cloudinary/helper.rb#290
  def cl_download_archive_url(options = T.unsafe(nil)); end

  # @see {Cloudinary::Utils.download_zip_url}
  #
  # source://cloudinary//lib/cloudinary/helper.rb#295
  def cl_download_zip_url(options = T.unsafe(nil)); end

  # cl_form_tag was originally contributed by Milovan Zogovic
  #
  # source://cloudinary//lib/cloudinary/helper.rb#196
  def cl_form_tag(callback_url, options = T.unsafe(nil), &block); end

  # Works similarly to cl_image_tag, however just generates the URL of the image
  #
  # source://cloudinary//lib/cloudinary/helper.rb#115
  def cl_image_path(source, options = T.unsafe(nil)); end

  # Stand-in for Rails image_tag helper that accepts various options for transformations.
  #
  # source:: the public ID, possibly with a file type extension.  If there is no extension, the
  #          :format option is expected to indicate what the extension is.  This value can contain
  #          the version, or not.
  # options:: Options you would normally pass to image_tag as well as Cloudinary-specific options
  #           to control the transformation.  Depending on what options are provided, the
  #           generated URL may or may not have Cloudinary-specific details in it.  For example, if
  #           you only specify :width and :height, these values will not be sent to Cloudinary, however
  #           if you also specify :crop, they will be.
  #
  # Examples
  #     # Image tag sized by the browser, not Cloudinary
  #     cl_image_tag "sample.png", :width=>100, :height=>100, :alt=>"hello" # W/H are not sent to Cloudinary
  #
  #     # Image tag sized by Cloudinary using the :fit crop strategy
  #     cl_image_tag "sample.png", :width=>100, :height=>100, :alt=>"hello", :crop=>:fit # W/H are sent to Cloudinary
  #
  #     Get a url for the image with the public id "sample", in :png format.
  #     cl_image_tag "sample", format: :png
  #
  # See documentation for more details and options: http://cloudinary.com/documentation/rails_image_manipulation
  #
  # source://cloudinary//lib/cloudinary/helper.rb#33
  def cl_image_tag(source, options = T.unsafe(nil)); end

  # source://cloudinary//lib/cloudinary/helper.rb#239
  def cl_image_upload(object_name, method, options = T.unsafe(nil)); end

  # source://cloudinary//lib/cloudinary/helper.rb#262
  def cl_image_upload_tag(field, options = T.unsafe(nil)); end

  # Works similarly to cl_image_tag, however just generates the URL of the image
  #
  # source://cloudinary//lib/cloudinary/helper.rb#115
  def cl_path(source, options = T.unsafe(nil)); end

  # source://cloudinary//lib/cloudinary/helper.rb#45
  def cl_picture_tag(source, options = T.unsafe(nil), sources = T.unsafe(nil)); end

  # source://cloudinary//lib/cloudinary/helper.rb#285
  def cl_private_download_url(public_id, format, options = T.unsafe(nil)); end

  # source://cloudinary//lib/cloudinary/helper.rb#299
  def cl_signed_download_url(public_id, options = T.unsafe(nil)); end

  # source://cloudinary//lib/cloudinary/helper.rb#60
  def cl_source_tag(source, options); end

  # source://cloudinary//lib/cloudinary/helper.rb#191
  def cl_sprite_tag(source, options = T.unsafe(nil)); end

  # source://cloudinary//lib/cloudinary/helper.rb#176
  def cl_sprite_url(source, options = T.unsafe(nil)); end

  # source://cloudinary//lib/cloudinary/helper.rb#243
  def cl_unsigned_image_upload(object_name, method, upload_preset, options = T.unsafe(nil)); end

  # source://cloudinary//lib/cloudinary/helper.rb#280
  def cl_unsigned_image_upload_tag(field, upload_preset, options = T.unsafe(nil)); end

  # source://cloudinary//lib/cloudinary/helper.rb#243
  def cl_unsigned_upload(object_name, method, upload_preset, options = T.unsafe(nil)); end

  # source://cloudinary//lib/cloudinary/helper.rb#280
  def cl_unsigned_upload_tag(field, upload_preset, options = T.unsafe(nil)); end

  # source://cloudinary//lib/cloudinary/helper.rb#239
  def cl_upload(object_name, method, options = T.unsafe(nil)); end

  # source://cloudinary//lib/cloudinary/helper.rb#262
  def cl_upload_tag(field, options = T.unsafe(nil)); end

  # source://cloudinary//lib/cloudinary/helper.rb#252
  def cl_upload_tag_params(options = T.unsafe(nil)); end

  # source://cloudinary//lib/cloudinary/helper.rb#248
  def cl_upload_url(options = T.unsafe(nil)); end

  # Returns a url for the given source with +options+
  #
  # source://cloudinary//lib/cloudinary/video_helper.rb#93
  def cl_video_path(source, options = T.unsafe(nil)); end

  # Creates an HTML video tag for the provided +source+
  #
  # ==== Options
  # * <tt>:source_types</tt> - Specify which source type the tag should include. defaults to webm, mp4 and ogv.
  # * <tt>:source_transformation</tt> - specific transformations to use for a specific source type.
  # * <tt>:sources</tt> - list of sources (overrides :source_types when present)
  # * <tt>:poster</tt> - override default thumbnail:
  #   * url: provide an ad hoc url
  #   * options: with specific poster transformations and/or Cloudinary +:public_id+
  #
  # ==== Examples
  #   cl_video_tag("mymovie.mp4")
  #   cl_video_tag("mymovie.mp4", :source_types => :webm)
  #   cl_video_tag("mymovie.ogv", :poster => "myspecialplaceholder.jpg")
  #   cl_video_tag("mymovie.webm", :source_types => [:webm, :mp4], :poster => {:effect => 'sepia'}) do
  #     content_tag( :span, "Cannot present video!")
  #   end
  #   cl_video_tag("mymovie", :sources => [
  #     {
  #       :type => "mp4",
  #       :codecs => "hev1",
  #       :transformations => { :video_codec => "h265" }
  #     },
  #     {
  #       :type => "webm",
  #       :transformations => { :video_codec => "auto" }
  #     }
  #   ])
  #
  # source://cloudinary//lib/cloudinary/video_helper.rb#55
  def cl_video_tag(source, options = T.unsafe(nil), &block); end

  # Returns a url for the thumbnail for the given video +source+ and +options+
  #
  # source://cloudinary//lib/cloudinary/video_helper.rb#103
  def cl_video_thumbnail_path(source, options = T.unsafe(nil)); end

  # Returns an HTML <tt>img</tt> tag with the thumbnail for the given video +source+ and +options+
  #
  # source://cloudinary//lib/cloudinary/video_helper.rb#98
  def cl_video_thumbnail_tag(source, options = T.unsafe(nil)); end

  # source://cloudinary//lib/cloudinary/helper.rb#222
  def cloudinary_js_config; end

  # source://cloudinary//lib/cloudinary/helper.rb#74
  def cloudinary_tag(source, options = T.unsafe(nil)); end

  # source://cloudinary//lib/cloudinary/helper.rb#235
  def cloudinary_url(source, options = T.unsafe(nil)); end

  # source://cloudinary//lib/cloudinary/helper.rb#140
  def facebook_profile_image_path(profile, options = T.unsafe(nil)); end

  # source://cloudinary//lib/cloudinary/helper.rb#136
  def facebook_profile_image_tag(profile, options = T.unsafe(nil)); end

  # source://cloudinary//lib/cloudinary/helper.rb#132
  def fetch_image_tag(profile, options = T.unsafe(nil)); end

  # source://cloudinary//lib/cloudinary/helper.rb#172
  def gplus_profile_image_path(profile, options = T.unsafe(nil)); end

  # source://cloudinary//lib/cloudinary/helper.rb#168
  def gplus_profile_image_tag(profile, options = T.unsafe(nil)); end

  # source://cloudinary//lib/cloudinary/helper.rb#148
  def gravatar_profile_image_path(email, options = T.unsafe(nil)); end

  # source://cloudinary//lib/cloudinary/helper.rb#144
  def gravatar_profile_image_tag(email, options = T.unsafe(nil)); end

  # source://cloudinary//lib/cloudinary/helper.rb#127
  def image_path_with_cloudinary(*args); end

  # source://cloudinary//lib/cloudinary/helper.rb#122
  def image_tag_with_cloudinary(*args); end

  # source://cloudinary//lib/cloudinary/helper.rb#164
  def twitter_name_profile_image_path(profile, options = T.unsafe(nil)); end

  # source://cloudinary//lib/cloudinary/helper.rb#160
  def twitter_name_profile_image_tag(profile, options = T.unsafe(nil)); end

  # source://cloudinary//lib/cloudinary/helper.rb#156
  def twitter_profile_image_path(profile, options = T.unsafe(nil)); end

  # source://cloudinary//lib/cloudinary/helper.rb#152
  def twitter_profile_image_tag(profile, options = T.unsafe(nil)); end

  protected

  # source://cloudinary//lib/cloudinary/video_helper.rb#109
  def strip_known_ext(name); end

  private

  # source://cloudinary//lib/cloudinary/helper.rb#334
  def build_callback_url(options); end

  # source://cloudinary//lib/cloudinary/helper.rb#320
  def cloudinary_url_internal(source, options = T.unsafe(nil)); end

  # source://cloudinary//lib/cloudinary/video_helper.rb#151
  def generate_tag_from_sources(params); end

  # source://cloudinary//lib/cloudinary/video_helper.rb#115
  def video_tag_from_source_types(source_name, options, video_options, fallback); end

  # source://cloudinary//lib/cloudinary/video_helper.rb#141
  def video_tag_from_sources(source_name, options, video_options, fallback); end

  class << self
    # @private
    #
    # source://cloudinary//lib/cloudinary/helper.rb#303
    def included(base); end
  end
end

# source://cloudinary//lib/cloudinary/helper.rb#221
CloudinaryHelper::CLOUDINARY_JS_CONFIG_PARAMS = T.let(T.unsafe(nil), Array)

# source://cloudinary//lib/cloudinary/helper.rb#9
CloudinaryHelper::CL_BLANK = T.let(T.unsafe(nil), String)

# source://cloudinary//lib/cloudinary/video_helper.rb#3
CloudinaryHelper::DEFAULT_POSTER_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://cloudinary//lib/cloudinary/video_helper.rb#6
CloudinaryHelper::DEFAULT_SOURCES = T.let(T.unsafe(nil), Array)

# source://cloudinary//lib/cloudinary/video_helper.rb#4
CloudinaryHelper::DEFAULT_SOURCE_TYPES = T.let(T.unsafe(nil), Array)

# source://cloudinary//lib/cloudinary/video_helper.rb#5
CloudinaryHelper::DEFAULT_VIDEO_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://cloudinary//lib/cloudinary/responsive.rb#1
module Responsive
  # Calculate breakpoints for the given configuration
  #
  # @private
  #
  # source://cloudinary//lib/cloudinary/responsive.rb#4
  def generate_breakpoints(srcset); end

  # Generate the srcset and sizes attributes
  #
  # @private
  #
  # source://cloudinary//lib/cloudinary/responsive.rb#31
  def generate_image_responsive_attributes(public_id, attributes = T.unsafe(nil), srcset_data = T.unsafe(nil), options = T.unsafe(nil)); end

  # Generate media attribute value of the HTML img tag
  #
  # @private
  #
  # source://cloudinary//lib/cloudinary/responsive.rb#97
  def generate_media_attribute(options); end

  # Generate a resource URL scaled to the given width
  #
  # @private
  #
  # source://cloudinary//lib/cloudinary/responsive.rb#77
  def generate_scaled_url(public_id, width, transformation = T.unsafe(nil), options = T.unsafe(nil)); end

  # Generate the sizes attribute
  #
  # @private
  #
  # source://cloudinary//lib/cloudinary/responsive.rb#108
  def generate_sizes_attribute(breakpoints); end

  # Generate srcset attribute value of the HTML img tag
  #
  # @private
  #
  # source://cloudinary//lib/cloudinary/responsive.rb#89
  def generate_srcset_attribute(public_id, breakpoints, transformation = T.unsafe(nil), options = T.unsafe(nil)); end

  # If cache is enabled, get the breakpoints from the cache. If the values were not found in the cache,
  # or cache is not enabled, generate the values.
  #
  # @private
  #
  # source://cloudinary//lib/cloudinary/responsive.rb#67
  def get_or_generate_breakpoints(public_id, srcset, options); end
end
